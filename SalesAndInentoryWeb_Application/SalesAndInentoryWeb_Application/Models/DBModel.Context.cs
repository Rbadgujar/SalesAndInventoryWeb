//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SalesAndInentoryWeb_Application.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class idealtec_inventoryEntities10 : DbContext
    {
        public idealtec_inventoryEntities10()
            : base("name=idealtec_inventoryEntities10")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CompanyBankAccount> CompanyBankAccounts { get; set; }
        public virtual DbSet<ReferralCode1> ReferralCode1 { get; set; }
        public virtual DbSet<tbl_BankAccount> tbl_BankAccount { get; set; }
        public virtual DbSet<tbl_BankAdjustment> tbl_BankAdjustment { get; set; }
        public virtual DbSet<tbl_BanktoBankTransfer> tbl_BanktoBankTransfer { get; set; }
        public virtual DbSet<tbl_CashAdjustment> tbl_CashAdjustment { get; set; }
        public virtual DbSet<tbl_CashInhand> tbl_CashInhand { get; set; }
        public virtual DbSet<tbl_CategoryMaster> tbl_CategoryMaster { get; set; }
        public virtual DbSet<tbl_CompanyMaster> tbl_CompanyMaster { get; set; }
        public virtual DbSet<tbl_CreditNote1> tbl_CreditNote1 { get; set; }
        public virtual DbSet<tbl_CreditNoteInner> tbl_CreditNoteInner { get; set; }
        public virtual DbSet<tbl_DebitNote> tbl_DebitNote { get; set; }
        public virtual DbSet<tbl_DebitNoteInner> tbl_DebitNoteInner { get; set; }
        public virtual DbSet<tbl_DeliveryChallan> tbl_DeliveryChallan { get; set; }
        public virtual DbSet<tbl_DeliveryChallanInner> tbl_DeliveryChallanInner { get; set; }
        public virtual DbSet<tbl_ExpenseCategory> tbl_ExpenseCategory { get; set; }
        public virtual DbSet<tbl_Expenses> tbl_Expenses { get; set; }
        public virtual DbSet<tbl_ExpensesInner> tbl_ExpensesInner { get; set; }
        public virtual DbSet<tbl_ItemAdjustement> tbl_ItemAdjustement { get; set; }
        public virtual DbSet<tbl_ItemMaster> tbl_ItemMaster { get; set; }
        public virtual DbSet<tbl_ItemServicemaster> tbl_ItemServicemaster { get; set; }
        public virtual DbSet<tbl_LoanBank> tbl_LoanBank { get; set; }
        public virtual DbSet<tbl_LoginPasssword> tbl_LoginPasssword { get; set; }
        public virtual DbSet<tbl_MakePayment> tbl_MakePayment { get; set; }
        public virtual DbSet<tbl_OtherIncome> tbl_OtherIncome { get; set; }
        public virtual DbSet<tbl_otherIncomeCaategory> tbl_otherIncomeCaategory { get; set; }
        public virtual DbSet<tbl_OtherIncomeInner> tbl_OtherIncomeInner { get; set; }
        public virtual DbSet<tbl_OtherIncomeInner1> tbl_OtherIncomeInner1 { get; set; }
        public virtual DbSet<tbl_OtherIncomeInner3> tbl_OtherIncomeInner3 { get; set; }
        public virtual DbSet<tbl_PartyGroup> tbl_PartyGroup { get; set; }
        public virtual DbSet<tbl_PartyMaster> tbl_PartyMaster { get; set; }
        public virtual DbSet<tbl_PaymentIn> tbl_PaymentIn { get; set; }
        public virtual DbSet<tbl_PaymentLink> tbl_PaymentLink { get; set; }
        public virtual DbSet<tbl_Paymentout> tbl_Paymentout { get; set; }
        public virtual DbSet<tbl_PurchaseBill> tbl_PurchaseBill { get; set; }
        public virtual DbSet<tbl_PurchaseBillInner> tbl_PurchaseBillInner { get; set; }
        public virtual DbSet<tbl_PurchaseOrder> tbl_PurchaseOrder { get; set; }
        public virtual DbSet<tbl_PurchaseOrderInner> tbl_PurchaseOrderInner { get; set; }
        public virtual DbSet<tbl_QuotationInner> tbl_QuotationInner { get; set; }
        public virtual DbSet<tbl_SaleInvoice> tbl_SaleInvoice { get; set; }
        public virtual DbSet<tbl_SaleInvoiceInner> tbl_SaleInvoiceInner { get; set; }
        public virtual DbSet<tbl_SaleOrder> tbl_SaleOrder { get; set; }
        public virtual DbSet<tbl_SaleOrderInner> tbl_SaleOrderInner { get; set; }
        public virtual DbSet<tbl_TransactionPasssword> tbl_TransactionPasssword { get; set; }
        public virtual DbSet<tbl_TransactionPrefix> tbl_TransactionPrefix { get; set; }
        public virtual DbSet<tbl_UnitConversion> tbl_UnitConversion { get; set; }
        public virtual DbSet<tbl_UnitMaster> tbl_UnitMaster { get; set; }
        public virtual DbSet<tble_NewCompany> tble_NewCompany { get; set; }
        public virtual DbSet<tblQuotation> tblQuotations { get; set; }
    
        public virtual ObjectResult<addcompany_Result> addcompany(string action, Nullable<int> iD, string companyName, string contactNo, string emailId, string referralCode, byte[] image1)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var referralCodeParameter = referralCode != null ?
                new ObjectParameter("ReferralCode", referralCode) :
                new ObjectParameter("ReferralCode", typeof(string));
    
            var image1Parameter = image1 != null ?
                new ObjectParameter("Image1", image1) :
                new ObjectParameter("Image1", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<addcompany_Result>("addcompany", actionParameter, iDParameter, companyNameParameter, contactNoParameter, emailIdParameter, referralCodeParameter, image1Parameter);
        }
    
        public virtual ObjectResult<BankAccountSelect_Result> BankAccountSelect(string action, Nullable<int> iD, string accountName, string bankName, string accountNo, Nullable<double> openingBal, Nullable<System.DateTime> date, Nullable<int> compid)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            var openingBalParameter = openingBal.HasValue ?
                new ObjectParameter("OpeningBal", openingBal) :
                new ObjectParameter("OpeningBal", typeof(double));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BankAccountSelect_Result>("BankAccountSelect", actionParameter, iDParameter, accountNameParameter, bankNameParameter, accountNoParameter, openingBalParameter, dateParameter, compidParameter);
        }
    
        public virtual ObjectResult<Banktobank_Result> Banktobank(string action, Nullable<int> iD, string fromBank, string toBank, Nullable<double> amount, Nullable<System.DateTime> date, string descripition, Nullable<int> compid)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var fromBankParameter = fromBank != null ?
                new ObjectParameter("FromBank", fromBank) :
                new ObjectParameter("FromBank", typeof(string));
    
            var toBankParameter = toBank != null ?
                new ObjectParameter("ToBank", toBank) :
                new ObjectParameter("ToBank", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var descripitionParameter = descripition != null ?
                new ObjectParameter("Descripition", descripition) :
                new ObjectParameter("Descripition", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Banktobank_Result>("Banktobank", actionParameter, iDParameter, fromBankParameter, toBankParameter, amountParameter, dateParameter, descripitionParameter, compidParameter);
        }
    
        public virtual ObjectResult<ReferralCodeSelect_Result> ReferralCodeSelect(string action, Nullable<int> iD, string referralCode, Nullable<int> compid)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var referralCodeParameter = referralCode != null ?
                new ObjectParameter("ReferralCode", referralCode) :
                new ObjectParameter("ReferralCode", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReferralCodeSelect_Result>("ReferralCodeSelect", actionParameter, iDParameter, referralCodeParameter, compidParameter);
        }
    
        public virtual ObjectResult<sp_CompanyBanckAccount_Result> sp_CompanyBanckAccount(string action, Nullable<int> iD, string bankName, string accountName, Nullable<int> accountNo, Nullable<double> openingBal, string date, Nullable<int> compid)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var accountNoParameter = accountNo.HasValue ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(int));
    
            var openingBalParameter = openingBal.HasValue ?
                new ObjectParameter("OpeningBal", openingBal) :
                new ObjectParameter("OpeningBal", typeof(double));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CompanyBanckAccount_Result>("sp_CompanyBanckAccount", actionParameter, iDParameter, bankNameParameter, accountNameParameter, accountNoParameter, openingBalParameter, dateParameter, compidParameter);
        }
    
        public virtual ObjectResult<sp_CompanyBankAccount_Result> sp_CompanyBankAccount(string action, Nullable<int> iD, string bankName, string accountName, string accountNo, Nullable<double> openingBal, string date, Nullable<int> compid)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            var openingBalParameter = openingBal.HasValue ?
                new ObjectParameter("OpeningBal", openingBal) :
                new ObjectParameter("OpeningBal", typeof(double));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CompanyBankAccount_Result>("sp_CompanyBankAccount", actionParameter, iDParameter, bankNameParameter, accountNameParameter, accountNoParameter, openingBalParameter, dateParameter, compidParameter);
        }
    
        public virtual int Sp_loginpassword(string comId, string password, string action)
        {
            var comIdParameter = comId != null ?
                new ObjectParameter("ComId", comId) :
                new ObjectParameter("ComId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_loginpassword", comIdParameter, passwordParameter, actionParameter);
        }
    
        public virtual ObjectResult<tbl_BankAdjustmentselect_Result> tbl_BankAdjustmentselect(string action, Nullable<int> iD, string bankAccount, string entryType, Nullable<double> amount, Nullable<System.DateTime> date, string description, Nullable<int> compid)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var bankAccountParameter = bankAccount != null ?
                new ObjectParameter("BankAccount", bankAccount) :
                new ObjectParameter("BankAccount", typeof(string));
    
            var entryTypeParameter = entryType != null ?
                new ObjectParameter("EntryType", entryType) :
                new ObjectParameter("EntryType", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_BankAdjustmentselect_Result>("tbl_BankAdjustmentselect", actionParameter, iDParameter, bankAccountParameter, entryTypeParameter, amountParameter, dateParameter, descriptionParameter, compidParameter);
        }
    
        public virtual ObjectResult<tbl_CashAdjustmentselect_Result> tbl_CashAdjustmentselect(string action, Nullable<int> iD, string cashAdjustment, Nullable<double> cashAmount, Nullable<System.DateTime> date, string description, string bankName, Nullable<int> compid)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var cashAdjustmentParameter = cashAdjustment != null ?
                new ObjectParameter("CashAdjustment", cashAdjustment) :
                new ObjectParameter("CashAdjustment", typeof(string));
    
            var cashAmountParameter = cashAmount.HasValue ?
                new ObjectParameter("CashAmount", cashAmount) :
                new ObjectParameter("CashAmount", typeof(double));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_CashAdjustmentselect_Result>("tbl_CashAdjustmentselect", actionParameter, iDParameter, cashAdjustmentParameter, cashAmountParameter, dateParameter, descriptionParameter, bankNameParameter, compidParameter);
        }
    
        public virtual ObjectResult<tbl_CashInhandSelect_Result> tbl_CashInhandSelect(string action, Nullable<int> iD, string adjustment, Nullable<double> amount, Nullable<System.DateTime> date, string description, string additionalFeild, string additionalFeild1, Nullable<int> compid)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var adjustmentParameter = adjustment != null ?
                new ObjectParameter("Adjustment", adjustment) :
                new ObjectParameter("Adjustment", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var additionalFeildParameter = additionalFeild != null ?
                new ObjectParameter("AdditionalFeild", additionalFeild) :
                new ObjectParameter("AdditionalFeild", typeof(string));
    
            var additionalFeild1Parameter = additionalFeild1 != null ?
                new ObjectParameter("AdditionalFeild1", additionalFeild1) :
                new ObjectParameter("AdditionalFeild1", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_CashInhandSelect_Result>("tbl_CashInhandSelect", actionParameter, iDParameter, adjustmentParameter, amountParameter, dateParameter, descriptionParameter, additionalFeildParameter, additionalFeild1Parameter, compidParameter);
        }
    
        public virtual ObjectResult<tbl_CategoryMasterSelect_Result> tbl_CategoryMasterSelect(string action, Nullable<int> categoryID, string categoryName, Nullable<int> compid)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_CategoryMasterSelect_Result>("tbl_CategoryMasterSelect", actionParameter, categoryIDParameter, categoryNameParameter, compidParameter);
        }
    
        public virtual ObjectResult<tbl_CompanyMasterSelect_Result> tbl_CompanyMasterSelect(string action, Nullable<int> companyID, string companyName, string phoneNo, string emailID, string referaleCode, string businessType, string address, string city, string state, string gSTNumber, string ownerName, byte[] signature, byte[] addLogo, string additinalFeild1, string additinalFeild2, string additinalFeild3, Nullable<int> def)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var referaleCodeParameter = referaleCode != null ?
                new ObjectParameter("ReferaleCode", referaleCode) :
                new ObjectParameter("ReferaleCode", typeof(string));
    
            var businessTypeParameter = businessType != null ?
                new ObjectParameter("BusinessType", businessType) :
                new ObjectParameter("BusinessType", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var gSTNumberParameter = gSTNumber != null ?
                new ObjectParameter("GSTNumber", gSTNumber) :
                new ObjectParameter("GSTNumber", typeof(string));
    
            var ownerNameParameter = ownerName != null ?
                new ObjectParameter("OwnerName", ownerName) :
                new ObjectParameter("OwnerName", typeof(string));
    
            var signatureParameter = signature != null ?
                new ObjectParameter("Signature", signature) :
                new ObjectParameter("Signature", typeof(byte[]));
    
            var addLogoParameter = addLogo != null ?
                new ObjectParameter("AddLogo", addLogo) :
                new ObjectParameter("AddLogo", typeof(byte[]));
    
            var additinalFeild1Parameter = additinalFeild1 != null ?
                new ObjectParameter("AdditinalFeild1", additinalFeild1) :
                new ObjectParameter("AdditinalFeild1", typeof(string));
    
            var additinalFeild2Parameter = additinalFeild2 != null ?
                new ObjectParameter("AdditinalFeild2", additinalFeild2) :
                new ObjectParameter("AdditinalFeild2", typeof(string));
    
            var additinalFeild3Parameter = additinalFeild3 != null ?
                new ObjectParameter("AdditinalFeild3", additinalFeild3) :
                new ObjectParameter("AdditinalFeild3", typeof(string));
    
            var defParameter = def.HasValue ?
                new ObjectParameter("def", def) :
                new ObjectParameter("def", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_CompanyMasterSelect_Result>("tbl_CompanyMasterSelect", actionParameter, companyIDParameter, companyNameParameter, phoneNoParameter, emailIDParameter, referaleCodeParameter, businessTypeParameter, addressParameter, cityParameter, stateParameter, gSTNumberParameter, ownerNameParameter, signatureParameter, addLogoParameter, additinalFeild1Parameter, additinalFeild2Parameter, additinalFeild3Parameter, defParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tbl_CreditNote1Select(string action, Nullable<int> invoiceNo, Nullable<int> returnNo, string partyName, string billingName, string pONumber, Nullable<System.DateTime> pODate, Nullable<System.DateTime> invoiceDate, Nullable<System.DateTime> dueDate, string stateofSupply, string contactNo, string paymentType, string transportName, string deliveryLocation, string vehicleNumber, Nullable<System.DateTime> deliverydate, string description, Nullable<double> transportCharges, byte[] image, string tax1, Nullable<double> taxAmount1, Nullable<double> cGST, Nullable<double> sGST, Nullable<int> totalDiscount, Nullable<double> discountAmount1, Nullable<double> roundFigure, Nullable<double> total, Nullable<double> received, Nullable<double> remainingBal, string paymentTerms, string feild1, string feild2, string feild3, string feild4, string feild5, string tableName, string status, string itemCategory, string barcode, Nullable<double> iGST, Nullable<int> compid, Nullable<double> calTotal, Nullable<double> taxShow, Nullable<double> discount)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var invoiceNoParameter = invoiceNo.HasValue ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(int));
    
            var returnNoParameter = returnNo.HasValue ?
                new ObjectParameter("ReturnNo", returnNo) :
                new ObjectParameter("ReturnNo", typeof(int));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var billingNameParameter = billingName != null ?
                new ObjectParameter("BillingName", billingName) :
                new ObjectParameter("BillingName", typeof(string));
    
            var pONumberParameter = pONumber != null ?
                new ObjectParameter("PONumber", pONumber) :
                new ObjectParameter("PONumber", typeof(string));
    
            var pODateParameter = pODate.HasValue ?
                new ObjectParameter("PODate", pODate) :
                new ObjectParameter("PODate", typeof(System.DateTime));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var stateofSupplyParameter = stateofSupply != null ?
                new ObjectParameter("StateofSupply", stateofSupply) :
                new ObjectParameter("StateofSupply", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var paymentTypeParameter = paymentType != null ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(string));
    
            var transportNameParameter = transportName != null ?
                new ObjectParameter("TransportName", transportName) :
                new ObjectParameter("TransportName", typeof(string));
    
            var deliveryLocationParameter = deliveryLocation != null ?
                new ObjectParameter("DeliveryLocation", deliveryLocation) :
                new ObjectParameter("DeliveryLocation", typeof(string));
    
            var vehicleNumberParameter = vehicleNumber != null ?
                new ObjectParameter("VehicleNumber", vehicleNumber) :
                new ObjectParameter("VehicleNumber", typeof(string));
    
            var deliverydateParameter = deliverydate.HasValue ?
                new ObjectParameter("Deliverydate", deliverydate) :
                new ObjectParameter("Deliverydate", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var transportChargesParameter = transportCharges.HasValue ?
                new ObjectParameter("TransportCharges", transportCharges) :
                new ObjectParameter("TransportCharges", typeof(double));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(byte[]));
    
            var tax1Parameter = tax1 != null ?
                new ObjectParameter("Tax1", tax1) :
                new ObjectParameter("Tax1", typeof(string));
    
            var taxAmount1Parameter = taxAmount1.HasValue ?
                new ObjectParameter("TaxAmount1", taxAmount1) :
                new ObjectParameter("TaxAmount1", typeof(double));
    
            var cGSTParameter = cGST.HasValue ?
                new ObjectParameter("CGST", cGST) :
                new ObjectParameter("CGST", typeof(double));
    
            var sGSTParameter = sGST.HasValue ?
                new ObjectParameter("SGST", sGST) :
                new ObjectParameter("SGST", typeof(double));
    
            var totalDiscountParameter = totalDiscount.HasValue ?
                new ObjectParameter("TotalDiscount", totalDiscount) :
                new ObjectParameter("TotalDiscount", typeof(int));
    
            var discountAmount1Parameter = discountAmount1.HasValue ?
                new ObjectParameter("DiscountAmount1", discountAmount1) :
                new ObjectParameter("DiscountAmount1", typeof(double));
    
            var roundFigureParameter = roundFigure.HasValue ?
                new ObjectParameter("RoundFigure", roundFigure) :
                new ObjectParameter("RoundFigure", typeof(double));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(double));
    
            var receivedParameter = received.HasValue ?
                new ObjectParameter("Received", received) :
                new ObjectParameter("Received", typeof(double));
    
            var remainingBalParameter = remainingBal.HasValue ?
                new ObjectParameter("RemainingBal", remainingBal) :
                new ObjectParameter("RemainingBal", typeof(double));
    
            var paymentTermsParameter = paymentTerms != null ?
                new ObjectParameter("PaymentTerms", paymentTerms) :
                new ObjectParameter("PaymentTerms", typeof(string));
    
            var feild1Parameter = feild1 != null ?
                new ObjectParameter("Feild1", feild1) :
                new ObjectParameter("Feild1", typeof(string));
    
            var feild2Parameter = feild2 != null ?
                new ObjectParameter("Feild2", feild2) :
                new ObjectParameter("Feild2", typeof(string));
    
            var feild3Parameter = feild3 != null ?
                new ObjectParameter("Feild3", feild3) :
                new ObjectParameter("Feild3", typeof(string));
    
            var feild4Parameter = feild4 != null ?
                new ObjectParameter("Feild4", feild4) :
                new ObjectParameter("Feild4", typeof(string));
    
            var feild5Parameter = feild5 != null ?
                new ObjectParameter("Feild5", feild5) :
                new ObjectParameter("Feild5", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var itemCategoryParameter = itemCategory != null ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var iGSTParameter = iGST.HasValue ?
                new ObjectParameter("IGST", iGST) :
                new ObjectParameter("IGST", typeof(double));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var calTotalParameter = calTotal.HasValue ?
                new ObjectParameter("CalTotal", calTotal) :
                new ObjectParameter("CalTotal", typeof(double));
    
            var taxShowParameter = taxShow.HasValue ?
                new ObjectParameter("TaxShow", taxShow) :
                new ObjectParameter("TaxShow", typeof(double));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tbl_CreditNote1Select", actionParameter, invoiceNoParameter, returnNoParameter, partyNameParameter, billingNameParameter, pONumberParameter, pODateParameter, invoiceDateParameter, dueDateParameter, stateofSupplyParameter, contactNoParameter, paymentTypeParameter, transportNameParameter, deliveryLocationParameter, vehicleNumberParameter, deliverydateParameter, descriptionParameter, transportChargesParameter, imageParameter, tax1Parameter, taxAmount1Parameter, cGSTParameter, sGSTParameter, totalDiscountParameter, discountAmount1Parameter, roundFigureParameter, totalParameter, receivedParameter, remainingBalParameter, paymentTermsParameter, feild1Parameter, feild2Parameter, feild3Parameter, feild4Parameter, feild5Parameter, tableNameParameter, statusParameter, itemCategoryParameter, barcodeParameter, iGSTParameter, compidParameter, calTotalParameter, taxShowParameter, discountParameter);
        }
    
        public virtual ObjectResult<tbl_CreditNoteInnersp_Result> tbl_CreditNoteInnersp(string action, Nullable<int> iD, string itemName, string basicUnit, string itemCode, Nullable<double> salePrice, string taxForSale, Nullable<double> saleTaxAmount, Nullable<int> qty, Nullable<int> freeQty, Nullable<double> itemAmount, string discount, Nullable<double> discountAmount, Nullable<int> compid, Nullable<int> returnNo, Nullable<int> itemID, Nullable<double> cGST, Nullable<double> sGST, Nullable<double> iGST, Nullable<double> calTotal)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var basicUnitParameter = basicUnit != null ?
                new ObjectParameter("BasicUnit", basicUnit) :
                new ObjectParameter("BasicUnit", typeof(string));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var salePriceParameter = salePrice.HasValue ?
                new ObjectParameter("SalePrice", salePrice) :
                new ObjectParameter("SalePrice", typeof(double));
    
            var taxForSaleParameter = taxForSale != null ?
                new ObjectParameter("TaxForSale", taxForSale) :
                new ObjectParameter("TaxForSale", typeof(string));
    
            var saleTaxAmountParameter = saleTaxAmount.HasValue ?
                new ObjectParameter("SaleTaxAmount", saleTaxAmount) :
                new ObjectParameter("SaleTaxAmount", typeof(double));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var freeQtyParameter = freeQty.HasValue ?
                new ObjectParameter("freeQty", freeQty) :
                new ObjectParameter("freeQty", typeof(int));
    
            var itemAmountParameter = itemAmount.HasValue ?
                new ObjectParameter("ItemAmount", itemAmount) :
                new ObjectParameter("ItemAmount", typeof(double));
    
            var discountParameter = discount != null ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(string));
    
            var discountAmountParameter = discountAmount.HasValue ?
                new ObjectParameter("DiscountAmount", discountAmount) :
                new ObjectParameter("DiscountAmount", typeof(double));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var returnNoParameter = returnNo.HasValue ?
                new ObjectParameter("ReturnNo", returnNo) :
                new ObjectParameter("ReturnNo", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var cGSTParameter = cGST.HasValue ?
                new ObjectParameter("CGST", cGST) :
                new ObjectParameter("CGST", typeof(double));
    
            var sGSTParameter = sGST.HasValue ?
                new ObjectParameter("SGST", sGST) :
                new ObjectParameter("SGST", typeof(double));
    
            var iGSTParameter = iGST.HasValue ?
                new ObjectParameter("IGST", iGST) :
                new ObjectParameter("IGST", typeof(double));
    
            var calTotalParameter = calTotal.HasValue ?
                new ObjectParameter("CalTotal", calTotal) :
                new ObjectParameter("CalTotal", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_CreditNoteInnersp_Result>("tbl_CreditNoteInnersp", actionParameter, iDParameter, itemNameParameter, basicUnitParameter, itemCodeParameter, salePriceParameter, taxForSaleParameter, saleTaxAmountParameter, qtyParameter, freeQtyParameter, itemAmountParameter, discountParameter, discountAmountParameter, compidParameter, returnNoParameter, itemIDParameter, cGSTParameter, sGSTParameter, iGSTParameter, calTotalParameter);
        }
    
        public virtual ObjectResult<tbl_DebitNoteInnersp_Result> tbl_DebitNoteInnersp(string action, Nullable<int> iD, Nullable<int> itemID, string itemName, string basicUnit, string itemCode, Nullable<double> salePrice, string taxForSale, Nullable<double> saleTaxAmount, Nullable<int> qty, Nullable<int> freeQty, Nullable<double> itemAmount, string taxType, string discount, Nullable<double> discountAmount, Nullable<int> compid, string returnNo, Nullable<int> deletedata, Nullable<double> cgst, Nullable<double> sgst, Nullable<double> igst, Nullable<double> itemtotal)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var basicUnitParameter = basicUnit != null ?
                new ObjectParameter("BasicUnit", basicUnit) :
                new ObjectParameter("BasicUnit", typeof(string));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var salePriceParameter = salePrice.HasValue ?
                new ObjectParameter("SalePrice", salePrice) :
                new ObjectParameter("SalePrice", typeof(double));
    
            var taxForSaleParameter = taxForSale != null ?
                new ObjectParameter("TaxForSale", taxForSale) :
                new ObjectParameter("TaxForSale", typeof(string));
    
            var saleTaxAmountParameter = saleTaxAmount.HasValue ?
                new ObjectParameter("SaleTaxAmount", saleTaxAmount) :
                new ObjectParameter("SaleTaxAmount", typeof(double));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var freeQtyParameter = freeQty.HasValue ?
                new ObjectParameter("freeQty", freeQty) :
                new ObjectParameter("freeQty", typeof(int));
    
            var itemAmountParameter = itemAmount.HasValue ?
                new ObjectParameter("ItemAmount", itemAmount) :
                new ObjectParameter("ItemAmount", typeof(double));
    
            var taxTypeParameter = taxType != null ?
                new ObjectParameter("TaxType", taxType) :
                new ObjectParameter("TaxType", typeof(string));
    
            var discountParameter = discount != null ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(string));
    
            var discountAmountParameter = discountAmount.HasValue ?
                new ObjectParameter("DiscountAmount", discountAmount) :
                new ObjectParameter("DiscountAmount", typeof(double));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var returnNoParameter = returnNo != null ?
                new ObjectParameter("returnNo", returnNo) :
                new ObjectParameter("returnNo", typeof(string));
    
            var deletedataParameter = deletedata.HasValue ?
                new ObjectParameter("Deletedata", deletedata) :
                new ObjectParameter("Deletedata", typeof(int));
    
            var cgstParameter = cgst.HasValue ?
                new ObjectParameter("cgst", cgst) :
                new ObjectParameter("cgst", typeof(double));
    
            var sgstParameter = sgst.HasValue ?
                new ObjectParameter("sgst", sgst) :
                new ObjectParameter("sgst", typeof(double));
    
            var igstParameter = igst.HasValue ?
                new ObjectParameter("igst", igst) :
                new ObjectParameter("igst", typeof(double));
    
            var itemtotalParameter = itemtotal.HasValue ?
                new ObjectParameter("itemtotal", itemtotal) :
                new ObjectParameter("itemtotal", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_DebitNoteInnersp_Result>("tbl_DebitNoteInnersp", actionParameter, iDParameter, itemIDParameter, itemNameParameter, basicUnitParameter, itemCodeParameter, salePriceParameter, taxForSaleParameter, saleTaxAmountParameter, qtyParameter, freeQtyParameter, itemAmountParameter, taxTypeParameter, discountParameter, discountAmountParameter, compidParameter, returnNoParameter, deletedataParameter, cgstParameter, sgstParameter, igstParameter, itemtotalParameter);
        }
    
        public virtual ObjectResult<tbl_DebitNoteSelect_Result> tbl_DebitNoteSelect(string action, Nullable<int> invoiceNo, Nullable<int> returnNo, string partyName, string billingName, string pONumber, Nullable<System.DateTime> pODate, Nullable<System.DateTime> invoiceDate, Nullable<System.DateTime> dueDate, string stateofSupply, string contactNo, string paymentType, string transportName, string deliveryLocation, string vehicleNumber, Nullable<System.DateTime> deliverydate, string description, Nullable<double> transportCharges, byte[] image, string tax1, Nullable<double> taxAmount1, Nullable<double> cGST, Nullable<double> sGST, string totalDiscount, Nullable<double> discountAmount1, Nullable<double> roundFigure, Nullable<double> total, Nullable<double> received, Nullable<double> remainingBal, string paymentTerms, string feild1, string feild2, string feild3, string feild4, string feild5, string status, string tableName, Nullable<int> iD, string barcode, Nullable<double> iGST, string itemCategory, Nullable<int> compid, Nullable<double> calotal, Nullable<double> taxshow, Nullable<double> discount)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var invoiceNoParameter = invoiceNo.HasValue ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(int));
    
            var returnNoParameter = returnNo.HasValue ?
                new ObjectParameter("ReturnNo", returnNo) :
                new ObjectParameter("ReturnNo", typeof(int));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var billingNameParameter = billingName != null ?
                new ObjectParameter("BillingName", billingName) :
                new ObjectParameter("BillingName", typeof(string));
    
            var pONumberParameter = pONumber != null ?
                new ObjectParameter("PONumber", pONumber) :
                new ObjectParameter("PONumber", typeof(string));
    
            var pODateParameter = pODate.HasValue ?
                new ObjectParameter("PODate", pODate) :
                new ObjectParameter("PODate", typeof(System.DateTime));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var stateofSupplyParameter = stateofSupply != null ?
                new ObjectParameter("StateofSupply", stateofSupply) :
                new ObjectParameter("StateofSupply", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var paymentTypeParameter = paymentType != null ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(string));
    
            var transportNameParameter = transportName != null ?
                new ObjectParameter("TransportName", transportName) :
                new ObjectParameter("TransportName", typeof(string));
    
            var deliveryLocationParameter = deliveryLocation != null ?
                new ObjectParameter("DeliveryLocation", deliveryLocation) :
                new ObjectParameter("DeliveryLocation", typeof(string));
    
            var vehicleNumberParameter = vehicleNumber != null ?
                new ObjectParameter("VehicleNumber", vehicleNumber) :
                new ObjectParameter("VehicleNumber", typeof(string));
    
            var deliverydateParameter = deliverydate.HasValue ?
                new ObjectParameter("Deliverydate", deliverydate) :
                new ObjectParameter("Deliverydate", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var transportChargesParameter = transportCharges.HasValue ?
                new ObjectParameter("TransportCharges", transportCharges) :
                new ObjectParameter("TransportCharges", typeof(double));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(byte[]));
    
            var tax1Parameter = tax1 != null ?
                new ObjectParameter("Tax1", tax1) :
                new ObjectParameter("Tax1", typeof(string));
    
            var taxAmount1Parameter = taxAmount1.HasValue ?
                new ObjectParameter("TaxAmount1", taxAmount1) :
                new ObjectParameter("TaxAmount1", typeof(double));
    
            var cGSTParameter = cGST.HasValue ?
                new ObjectParameter("CGST", cGST) :
                new ObjectParameter("CGST", typeof(double));
    
            var sGSTParameter = sGST.HasValue ?
                new ObjectParameter("SGST", sGST) :
                new ObjectParameter("SGST", typeof(double));
    
            var totalDiscountParameter = totalDiscount != null ?
                new ObjectParameter("TotalDiscount", totalDiscount) :
                new ObjectParameter("TotalDiscount", typeof(string));
    
            var discountAmount1Parameter = discountAmount1.HasValue ?
                new ObjectParameter("DiscountAmount1", discountAmount1) :
                new ObjectParameter("DiscountAmount1", typeof(double));
    
            var roundFigureParameter = roundFigure.HasValue ?
                new ObjectParameter("RoundFigure", roundFigure) :
                new ObjectParameter("RoundFigure", typeof(double));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(double));
    
            var receivedParameter = received.HasValue ?
                new ObjectParameter("Received", received) :
                new ObjectParameter("Received", typeof(double));
    
            var remainingBalParameter = remainingBal.HasValue ?
                new ObjectParameter("RemainingBal", remainingBal) :
                new ObjectParameter("RemainingBal", typeof(double));
    
            var paymentTermsParameter = paymentTerms != null ?
                new ObjectParameter("PaymentTerms", paymentTerms) :
                new ObjectParameter("PaymentTerms", typeof(string));
    
            var feild1Parameter = feild1 != null ?
                new ObjectParameter("Feild1", feild1) :
                new ObjectParameter("Feild1", typeof(string));
    
            var feild2Parameter = feild2 != null ?
                new ObjectParameter("Feild2", feild2) :
                new ObjectParameter("Feild2", typeof(string));
    
            var feild3Parameter = feild3 != null ?
                new ObjectParameter("Feild3", feild3) :
                new ObjectParameter("Feild3", typeof(string));
    
            var feild4Parameter = feild4 != null ?
                new ObjectParameter("Feild4", feild4) :
                new ObjectParameter("Feild4", typeof(string));
    
            var feild5Parameter = feild5 != null ?
                new ObjectParameter("Feild5", feild5) :
                new ObjectParameter("Feild5", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var iGSTParameter = iGST.HasValue ?
                new ObjectParameter("IGST", iGST) :
                new ObjectParameter("IGST", typeof(double));
    
            var itemCategoryParameter = itemCategory != null ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var calotalParameter = calotal.HasValue ?
                new ObjectParameter("calotal", calotal) :
                new ObjectParameter("calotal", typeof(double));
    
            var taxshowParameter = taxshow.HasValue ?
                new ObjectParameter("taxshow", taxshow) :
                new ObjectParameter("taxshow", typeof(double));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("discount", discount) :
                new ObjectParameter("discount", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_DebitNoteSelect_Result>("tbl_DebitNoteSelect", actionParameter, invoiceNoParameter, returnNoParameter, partyNameParameter, billingNameParameter, pONumberParameter, pODateParameter, invoiceDateParameter, dueDateParameter, stateofSupplyParameter, contactNoParameter, paymentTypeParameter, transportNameParameter, deliveryLocationParameter, vehicleNumberParameter, deliverydateParameter, descriptionParameter, transportChargesParameter, imageParameter, tax1Parameter, taxAmount1Parameter, cGSTParameter, sGSTParameter, totalDiscountParameter, discountAmount1Parameter, roundFigureParameter, totalParameter, receivedParameter, remainingBalParameter, paymentTermsParameter, feild1Parameter, feild2Parameter, feild3Parameter, feild4Parameter, feild5Parameter, statusParameter, tableNameParameter, iDParameter, barcodeParameter, iGSTParameter, itemCategoryParameter, compidParameter, calotalParameter, taxshowParameter, discountParameter);
        }
    
        public virtual ObjectResult<tbl_DeliveryChallanInnersp_Result> tbl_DeliveryChallanInnersp(string action, Nullable<int> iD, Nullable<int> itemID, string itemName, string basicUnit, string itemCode, Nullable<double> salePrice, string taxForSale, Nullable<double> saleTaxAmount, Nullable<int> qty, Nullable<int> freeQty, Nullable<double> itemAmount, string discount, Nullable<double> discountAmount, Nullable<int> compid, Nullable<int> challanNo, Nullable<double> cGST, Nullable<double> sGST, Nullable<double> iGST, Nullable<double> calTotal)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var basicUnitParameter = basicUnit != null ?
                new ObjectParameter("BasicUnit", basicUnit) :
                new ObjectParameter("BasicUnit", typeof(string));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var salePriceParameter = salePrice.HasValue ?
                new ObjectParameter("SalePrice", salePrice) :
                new ObjectParameter("SalePrice", typeof(double));
    
            var taxForSaleParameter = taxForSale != null ?
                new ObjectParameter("TaxForSale", taxForSale) :
                new ObjectParameter("TaxForSale", typeof(string));
    
            var saleTaxAmountParameter = saleTaxAmount.HasValue ?
                new ObjectParameter("SaleTaxAmount", saleTaxAmount) :
                new ObjectParameter("SaleTaxAmount", typeof(double));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var freeQtyParameter = freeQty.HasValue ?
                new ObjectParameter("freeQty", freeQty) :
                new ObjectParameter("freeQty", typeof(int));
    
            var itemAmountParameter = itemAmount.HasValue ?
                new ObjectParameter("ItemAmount", itemAmount) :
                new ObjectParameter("ItemAmount", typeof(double));
    
            var discountParameter = discount != null ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(string));
    
            var discountAmountParameter = discountAmount.HasValue ?
                new ObjectParameter("DiscountAmount", discountAmount) :
                new ObjectParameter("DiscountAmount", typeof(double));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var challanNoParameter = challanNo.HasValue ?
                new ObjectParameter("ChallanNo", challanNo) :
                new ObjectParameter("ChallanNo", typeof(int));
    
            var cGSTParameter = cGST.HasValue ?
                new ObjectParameter("CGST", cGST) :
                new ObjectParameter("CGST", typeof(double));
    
            var sGSTParameter = sGST.HasValue ?
                new ObjectParameter("SGST", sGST) :
                new ObjectParameter("SGST", typeof(double));
    
            var iGSTParameter = iGST.HasValue ?
                new ObjectParameter("IGST", iGST) :
                new ObjectParameter("IGST", typeof(double));
    
            var calTotalParameter = calTotal.HasValue ?
                new ObjectParameter("CalTotal", calTotal) :
                new ObjectParameter("CalTotal", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_DeliveryChallanInnersp_Result>("tbl_DeliveryChallanInnersp", actionParameter, iDParameter, itemIDParameter, itemNameParameter, basicUnitParameter, itemCodeParameter, salePriceParameter, taxForSaleParameter, saleTaxAmountParameter, qtyParameter, freeQtyParameter, itemAmountParameter, discountParameter, discountAmountParameter, compidParameter, challanNoParameter, cGSTParameter, sGSTParameter, iGSTParameter, calTotalParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tbl_DeliveryChallanSelect(string action, Nullable<int> challanNo, string partyName, string billingName, string billingAddress, string partyAddress, Nullable<System.DateTime> invoiceDate, Nullable<System.DateTime> dueDate, string stateofSupply, string contactNo, string paymentType, string transportName, string deliveryLocation, string vehicleNumber, Nullable<System.DateTime> deliverydate, string description, Nullable<double> transportCharges, byte[] image, string tax1, Nullable<double> taxAmount1, Nullable<double> cGST, Nullable<double> sGST, string totalDiscount, Nullable<double> discountAmount1, Nullable<double> roundFigure, Nullable<double> total, Nullable<double> received, Nullable<double> remainingBal, string paymentTerms, string feild1, string feild2, string feild3, string feild4, string feild5, Nullable<int> iD, string status, string tableName, string itemCategory, string barcode, Nullable<double> iGST, Nullable<int> compid, Nullable<double> calTotal, Nullable<double> taxShow, Nullable<double> discount)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var challanNoParameter = challanNo.HasValue ?
                new ObjectParameter("ChallanNo", challanNo) :
                new ObjectParameter("ChallanNo", typeof(int));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var billingNameParameter = billingName != null ?
                new ObjectParameter("BillingName", billingName) :
                new ObjectParameter("BillingName", typeof(string));
    
            var billingAddressParameter = billingAddress != null ?
                new ObjectParameter("BillingAddress", billingAddress) :
                new ObjectParameter("BillingAddress", typeof(string));
    
            var partyAddressParameter = partyAddress != null ?
                new ObjectParameter("PartyAddress", partyAddress) :
                new ObjectParameter("PartyAddress", typeof(string));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var stateofSupplyParameter = stateofSupply != null ?
                new ObjectParameter("StateofSupply", stateofSupply) :
                new ObjectParameter("StateofSupply", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var paymentTypeParameter = paymentType != null ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(string));
    
            var transportNameParameter = transportName != null ?
                new ObjectParameter("TransportName", transportName) :
                new ObjectParameter("TransportName", typeof(string));
    
            var deliveryLocationParameter = deliveryLocation != null ?
                new ObjectParameter("DeliveryLocation", deliveryLocation) :
                new ObjectParameter("DeliveryLocation", typeof(string));
    
            var vehicleNumberParameter = vehicleNumber != null ?
                new ObjectParameter("VehicleNumber", vehicleNumber) :
                new ObjectParameter("VehicleNumber", typeof(string));
    
            var deliverydateParameter = deliverydate.HasValue ?
                new ObjectParameter("Deliverydate", deliverydate) :
                new ObjectParameter("Deliverydate", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var transportChargesParameter = transportCharges.HasValue ?
                new ObjectParameter("TransportCharges", transportCharges) :
                new ObjectParameter("TransportCharges", typeof(double));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(byte[]));
    
            var tax1Parameter = tax1 != null ?
                new ObjectParameter("Tax1", tax1) :
                new ObjectParameter("Tax1", typeof(string));
    
            var taxAmount1Parameter = taxAmount1.HasValue ?
                new ObjectParameter("TaxAmount1", taxAmount1) :
                new ObjectParameter("TaxAmount1", typeof(double));
    
            var cGSTParameter = cGST.HasValue ?
                new ObjectParameter("CGST", cGST) :
                new ObjectParameter("CGST", typeof(double));
    
            var sGSTParameter = sGST.HasValue ?
                new ObjectParameter("SGST", sGST) :
                new ObjectParameter("SGST", typeof(double));
    
            var totalDiscountParameter = totalDiscount != null ?
                new ObjectParameter("TotalDiscount", totalDiscount) :
                new ObjectParameter("TotalDiscount", typeof(string));
    
            var discountAmount1Parameter = discountAmount1.HasValue ?
                new ObjectParameter("DiscountAmount1", discountAmount1) :
                new ObjectParameter("DiscountAmount1", typeof(double));
    
            var roundFigureParameter = roundFigure.HasValue ?
                new ObjectParameter("RoundFigure", roundFigure) :
                new ObjectParameter("RoundFigure", typeof(double));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(double));
    
            var receivedParameter = received.HasValue ?
                new ObjectParameter("Received", received) :
                new ObjectParameter("Received", typeof(double));
    
            var remainingBalParameter = remainingBal.HasValue ?
                new ObjectParameter("RemainingBal", remainingBal) :
                new ObjectParameter("RemainingBal", typeof(double));
    
            var paymentTermsParameter = paymentTerms != null ?
                new ObjectParameter("PaymentTerms", paymentTerms) :
                new ObjectParameter("PaymentTerms", typeof(string));
    
            var feild1Parameter = feild1 != null ?
                new ObjectParameter("Feild1", feild1) :
                new ObjectParameter("Feild1", typeof(string));
    
            var feild2Parameter = feild2 != null ?
                new ObjectParameter("Feild2", feild2) :
                new ObjectParameter("Feild2", typeof(string));
    
            var feild3Parameter = feild3 != null ?
                new ObjectParameter("Feild3", feild3) :
                new ObjectParameter("Feild3", typeof(string));
    
            var feild4Parameter = feild4 != null ?
                new ObjectParameter("Feild4", feild4) :
                new ObjectParameter("Feild4", typeof(string));
    
            var feild5Parameter = feild5 != null ?
                new ObjectParameter("Feild5", feild5) :
                new ObjectParameter("Feild5", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var itemCategoryParameter = itemCategory != null ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var iGSTParameter = iGST.HasValue ?
                new ObjectParameter("IGST", iGST) :
                new ObjectParameter("IGST", typeof(double));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var calTotalParameter = calTotal.HasValue ?
                new ObjectParameter("CalTotal", calTotal) :
                new ObjectParameter("CalTotal", typeof(double));
    
            var taxShowParameter = taxShow.HasValue ?
                new ObjectParameter("TaxShow", taxShow) :
                new ObjectParameter("TaxShow", typeof(double));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tbl_DeliveryChallanSelect", actionParameter, challanNoParameter, partyNameParameter, billingNameParameter, billingAddressParameter, partyAddressParameter, invoiceDateParameter, dueDateParameter, stateofSupplyParameter, contactNoParameter, paymentTypeParameter, transportNameParameter, deliveryLocationParameter, vehicleNumberParameter, deliverydateParameter, descriptionParameter, transportChargesParameter, imageParameter, tax1Parameter, taxAmount1Parameter, cGSTParameter, sGSTParameter, totalDiscountParameter, discountAmount1Parameter, roundFigureParameter, totalParameter, receivedParameter, remainingBalParameter, paymentTermsParameter, feild1Parameter, feild2Parameter, feild3Parameter, feild4Parameter, feild5Parameter, iDParameter, statusParameter, tableNameParameter, itemCategoryParameter, barcodeParameter, iGSTParameter, compidParameter, calTotalParameter, taxShowParameter, discountParameter);
        }
    
        public virtual ObjectResult<tbl_ExpenseCategorySelect_Result> tbl_ExpenseCategorySelect(string action, Nullable<int> categoryID, string categoryName, Nullable<int> compid)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_ExpenseCategorySelect_Result>("tbl_ExpenseCategorySelect", actionParameter, categoryIDParameter, categoryNameParameter, compidParameter);
        }
    
        public virtual ObjectResult<tbl_ExpensesInnersp_Result> tbl_ExpensesInnersp(string action, Nullable<int> id_inner, string itemName, Nullable<double> salePrice, Nullable<int> qty, Nullable<double> itemAmount, Nullable<int> compid, Nullable<int> iD1)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var id_innerParameter = id_inner.HasValue ?
                new ObjectParameter("Id_inner", id_inner) :
                new ObjectParameter("Id_inner", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var salePriceParameter = salePrice.HasValue ?
                new ObjectParameter("SalePrice", salePrice) :
                new ObjectParameter("SalePrice", typeof(double));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var itemAmountParameter = itemAmount.HasValue ?
                new ObjectParameter("ItemAmount", itemAmount) :
                new ObjectParameter("ItemAmount", typeof(double));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var iD1Parameter = iD1.HasValue ?
                new ObjectParameter("ID1", iD1) :
                new ObjectParameter("ID1", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_ExpensesInnersp_Result>("tbl_ExpensesInnersp", actionParameter, id_innerParameter, itemNameParameter, salePriceParameter, qtyParameter, itemAmountParameter, compidParameter, iD1Parameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tbl_ExpensesSelect(string action, Nullable<int> iD1, string expenseCategory, Nullable<System.DateTime> date, string description, byte[] image, Nullable<double> total, Nullable<double> paid, Nullable<double> balance, string additinalFeild1, string additionalFeild2, string status, string tableName, Nullable<int> compid)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iD1Parameter = iD1.HasValue ?
                new ObjectParameter("ID1", iD1) :
                new ObjectParameter("ID1", typeof(int));
    
            var expenseCategoryParameter = expenseCategory != null ?
                new ObjectParameter("ExpenseCategory", expenseCategory) :
                new ObjectParameter("ExpenseCategory", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(byte[]));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(double));
    
            var paidParameter = paid.HasValue ?
                new ObjectParameter("Paid", paid) :
                new ObjectParameter("Paid", typeof(double));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(double));
    
            var additinalFeild1Parameter = additinalFeild1 != null ?
                new ObjectParameter("AdditinalFeild1", additinalFeild1) :
                new ObjectParameter("AdditinalFeild1", typeof(string));
    
            var additionalFeild2Parameter = additionalFeild2 != null ?
                new ObjectParameter("AdditionalFeild2", additionalFeild2) :
                new ObjectParameter("AdditionalFeild2", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tbl_ExpensesSelect", actionParameter, iD1Parameter, expenseCategoryParameter, dateParameter, descriptionParameter, imageParameter, totalParameter, paidParameter, balanceParameter, additinalFeild1Parameter, additionalFeild2Parameter, statusParameter, tableNameParameter, compidParameter);
        }
    
        public virtual ObjectResult<tbl_ItemAdjustementSelect_Result> tbl_ItemAdjustementSelect(string action, Nullable<int> iD, string itemName, string adjustmentType, Nullable<System.DateTime> adjustmentDate, Nullable<double> atPrice, string quantity, string details, Nullable<int> compid)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var adjustmentTypeParameter = adjustmentType != null ?
                new ObjectParameter("AdjustmentType", adjustmentType) :
                new ObjectParameter("AdjustmentType", typeof(string));
    
            var adjustmentDateParameter = adjustmentDate.HasValue ?
                new ObjectParameter("AdjustmentDate", adjustmentDate) :
                new ObjectParameter("AdjustmentDate", typeof(System.DateTime));
    
            var atPriceParameter = atPrice.HasValue ?
                new ObjectParameter("AtPrice", atPrice) :
                new ObjectParameter("AtPrice", typeof(double));
    
            var quantityParameter = quantity != null ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(string));
    
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_ItemAdjustementSelect_Result>("tbl_ItemAdjustementSelect", actionParameter, iDParameter, itemNameParameter, adjustmentTypeParameter, adjustmentDateParameter, atPriceParameter, quantityParameter, detailsParameter, compidParameter);
        }
    
        public virtual ObjectResult<tbl_Itemexport_Result> tbl_Itemexport(string action, Nullable<int> itemID, string itemName, string hSNCode, string basicUnit, string secondaryUnit, string itemCode, string itemCategory, Nullable<double> salePrice, string taxForSale, Nullable<double> saleTaxAmount, Nullable<double> purchasePrice, string taxForPurchase, Nullable<double> purchaseTaxAmount, Nullable<double> openingQty, Nullable<double> atPrice, Nullable<System.DateTime> date, string itemLocation, Nullable<double> trackingMRP, string batchNo, string serialNo, Nullable<System.DateTime> mFgdate, Nullable<System.DateTime> expdate, string size, string description, Nullable<int> minimumStock, byte[] image1, byte[] image2, byte[] image3, byte[] image4, byte[] image5, Nullable<int> unitID, Nullable<int> categoryID, string barcode, Nullable<int> compid)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var hSNCodeParameter = hSNCode != null ?
                new ObjectParameter("HSNCode", hSNCode) :
                new ObjectParameter("HSNCode", typeof(string));
    
            var basicUnitParameter = basicUnit != null ?
                new ObjectParameter("BasicUnit", basicUnit) :
                new ObjectParameter("BasicUnit", typeof(string));
    
            var secondaryUnitParameter = secondaryUnit != null ?
                new ObjectParameter("SecondaryUnit", secondaryUnit) :
                new ObjectParameter("SecondaryUnit", typeof(string));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var itemCategoryParameter = itemCategory != null ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(string));
    
            var salePriceParameter = salePrice.HasValue ?
                new ObjectParameter("SalePrice", salePrice) :
                new ObjectParameter("SalePrice", typeof(double));
    
            var taxForSaleParameter = taxForSale != null ?
                new ObjectParameter("TaxForSale", taxForSale) :
                new ObjectParameter("TaxForSale", typeof(string));
    
            var saleTaxAmountParameter = saleTaxAmount.HasValue ?
                new ObjectParameter("SaleTaxAmount", saleTaxAmount) :
                new ObjectParameter("SaleTaxAmount", typeof(double));
    
            var purchasePriceParameter = purchasePrice.HasValue ?
                new ObjectParameter("PurchasePrice", purchasePrice) :
                new ObjectParameter("PurchasePrice", typeof(double));
    
            var taxForPurchaseParameter = taxForPurchase != null ?
                new ObjectParameter("TaxForPurchase", taxForPurchase) :
                new ObjectParameter("TaxForPurchase", typeof(string));
    
            var purchaseTaxAmountParameter = purchaseTaxAmount.HasValue ?
                new ObjectParameter("PurchaseTaxAmount", purchaseTaxAmount) :
                new ObjectParameter("PurchaseTaxAmount", typeof(double));
    
            var openingQtyParameter = openingQty.HasValue ?
                new ObjectParameter("OpeningQty", openingQty) :
                new ObjectParameter("OpeningQty", typeof(double));
    
            var atPriceParameter = atPrice.HasValue ?
                new ObjectParameter("atPrice", atPrice) :
                new ObjectParameter("atPrice", typeof(double));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var itemLocationParameter = itemLocation != null ?
                new ObjectParameter("ItemLocation", itemLocation) :
                new ObjectParameter("ItemLocation", typeof(string));
    
            var trackingMRPParameter = trackingMRP.HasValue ?
                new ObjectParameter("TrackingMRP", trackingMRP) :
                new ObjectParameter("TrackingMRP", typeof(double));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var serialNoParameter = serialNo != null ?
                new ObjectParameter("SerialNo", serialNo) :
                new ObjectParameter("SerialNo", typeof(string));
    
            var mFgdateParameter = mFgdate.HasValue ?
                new ObjectParameter("MFgdate", mFgdate) :
                new ObjectParameter("MFgdate", typeof(System.DateTime));
    
            var expdateParameter = expdate.HasValue ?
                new ObjectParameter("Expdate", expdate) :
                new ObjectParameter("Expdate", typeof(System.DateTime));
    
            var sizeParameter = size != null ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var minimumStockParameter = minimumStock.HasValue ?
                new ObjectParameter("MinimumStock", minimumStock) :
                new ObjectParameter("MinimumStock", typeof(int));
    
            var image1Parameter = image1 != null ?
                new ObjectParameter("Image1", image1) :
                new ObjectParameter("Image1", typeof(byte[]));
    
            var image2Parameter = image2 != null ?
                new ObjectParameter("Image2", image2) :
                new ObjectParameter("Image2", typeof(byte[]));
    
            var image3Parameter = image3 != null ?
                new ObjectParameter("Image3", image3) :
                new ObjectParameter("Image3", typeof(byte[]));
    
            var image4Parameter = image4 != null ?
                new ObjectParameter("Image4", image4) :
                new ObjectParameter("Image4", typeof(byte[]));
    
            var image5Parameter = image5 != null ?
                new ObjectParameter("Image5", image5) :
                new ObjectParameter("Image5", typeof(byte[]));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_Itemexport_Result>("tbl_Itemexport", actionParameter, itemIDParameter, itemNameParameter, hSNCodeParameter, basicUnitParameter, secondaryUnitParameter, itemCodeParameter, itemCategoryParameter, salePriceParameter, taxForSaleParameter, saleTaxAmountParameter, purchasePriceParameter, taxForPurchaseParameter, purchaseTaxAmountParameter, openingQtyParameter, atPriceParameter, dateParameter, itemLocationParameter, trackingMRPParameter, batchNoParameter, serialNoParameter, mFgdateParameter, expdateParameter, sizeParameter, descriptionParameter, minimumStockParameter, image1Parameter, image2Parameter, image3Parameter, image4Parameter, image5Parameter, unitIDParameter, categoryIDParameter, barcodeParameter, compidParameter);
        }
    
        public virtual ObjectResult<tbl_ItemMasterSelect_Result> tbl_ItemMasterSelect(string action, Nullable<int> itemID, string itemName, string hSNCode, string basicUnit, string secondaryUnit, string itemCode, string itemCategory, Nullable<double> salePrice, string taxForSale, Nullable<double> saleTaxAmount, Nullable<double> purchasePrice, string taxForPurchase, Nullable<double> purchaseTaxAmount, Nullable<double> openingQty, Nullable<double> atPrice, Nullable<System.DateTime> date, Nullable<double> cess, string itemLocation, Nullable<double> trackingMRP, string batchNo, string serialNo, Nullable<System.DateTime> mFgdate, Nullable<System.DateTime> expdate, string size, string description, Nullable<int> minimumStock, byte[] image1, byte[] image2, byte[] image3, byte[] image4, byte[] image5, Nullable<int> unitID, Nullable<int> categoryID, string barcode, Nullable<int> compid)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var hSNCodeParameter = hSNCode != null ?
                new ObjectParameter("HSNCode", hSNCode) :
                new ObjectParameter("HSNCode", typeof(string));
    
            var basicUnitParameter = basicUnit != null ?
                new ObjectParameter("BasicUnit", basicUnit) :
                new ObjectParameter("BasicUnit", typeof(string));
    
            var secondaryUnitParameter = secondaryUnit != null ?
                new ObjectParameter("SecondaryUnit", secondaryUnit) :
                new ObjectParameter("SecondaryUnit", typeof(string));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var itemCategoryParameter = itemCategory != null ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(string));
    
            var salePriceParameter = salePrice.HasValue ?
                new ObjectParameter("SalePrice", salePrice) :
                new ObjectParameter("SalePrice", typeof(double));
    
            var taxForSaleParameter = taxForSale != null ?
                new ObjectParameter("TaxForSale", taxForSale) :
                new ObjectParameter("TaxForSale", typeof(string));
    
            var saleTaxAmountParameter = saleTaxAmount.HasValue ?
                new ObjectParameter("SaleTaxAmount", saleTaxAmount) :
                new ObjectParameter("SaleTaxAmount", typeof(double));
    
            var purchasePriceParameter = purchasePrice.HasValue ?
                new ObjectParameter("PurchasePrice", purchasePrice) :
                new ObjectParameter("PurchasePrice", typeof(double));
    
            var taxForPurchaseParameter = taxForPurchase != null ?
                new ObjectParameter("TaxForPurchase", taxForPurchase) :
                new ObjectParameter("TaxForPurchase", typeof(string));
    
            var purchaseTaxAmountParameter = purchaseTaxAmount.HasValue ?
                new ObjectParameter("PurchaseTaxAmount", purchaseTaxAmount) :
                new ObjectParameter("PurchaseTaxAmount", typeof(double));
    
            var openingQtyParameter = openingQty.HasValue ?
                new ObjectParameter("OpeningQty", openingQty) :
                new ObjectParameter("OpeningQty", typeof(double));
    
            var atPriceParameter = atPrice.HasValue ?
                new ObjectParameter("atPrice", atPrice) :
                new ObjectParameter("atPrice", typeof(double));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var cessParameter = cess.HasValue ?
                new ObjectParameter("Cess", cess) :
                new ObjectParameter("Cess", typeof(double));
    
            var itemLocationParameter = itemLocation != null ?
                new ObjectParameter("ItemLocation", itemLocation) :
                new ObjectParameter("ItemLocation", typeof(string));
    
            var trackingMRPParameter = trackingMRP.HasValue ?
                new ObjectParameter("TrackingMRP", trackingMRP) :
                new ObjectParameter("TrackingMRP", typeof(double));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var serialNoParameter = serialNo != null ?
                new ObjectParameter("SerialNo", serialNo) :
                new ObjectParameter("SerialNo", typeof(string));
    
            var mFgdateParameter = mFgdate.HasValue ?
                new ObjectParameter("MFgdate", mFgdate) :
                new ObjectParameter("MFgdate", typeof(System.DateTime));
    
            var expdateParameter = expdate.HasValue ?
                new ObjectParameter("Expdate", expdate) :
                new ObjectParameter("Expdate", typeof(System.DateTime));
    
            var sizeParameter = size != null ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var minimumStockParameter = minimumStock.HasValue ?
                new ObjectParameter("MinimumStock", minimumStock) :
                new ObjectParameter("MinimumStock", typeof(int));
    
            var image1Parameter = image1 != null ?
                new ObjectParameter("Image1", image1) :
                new ObjectParameter("Image1", typeof(byte[]));
    
            var image2Parameter = image2 != null ?
                new ObjectParameter("Image2", image2) :
                new ObjectParameter("Image2", typeof(byte[]));
    
            var image3Parameter = image3 != null ?
                new ObjectParameter("Image3", image3) :
                new ObjectParameter("Image3", typeof(byte[]));
    
            var image4Parameter = image4 != null ?
                new ObjectParameter("Image4", image4) :
                new ObjectParameter("Image4", typeof(byte[]));
    
            var image5Parameter = image5 != null ?
                new ObjectParameter("Image5", image5) :
                new ObjectParameter("Image5", typeof(byte[]));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_ItemMasterSelect_Result>("tbl_ItemMasterSelect", actionParameter, itemIDParameter, itemNameParameter, hSNCodeParameter, basicUnitParameter, secondaryUnitParameter, itemCodeParameter, itemCategoryParameter, salePriceParameter, taxForSaleParameter, saleTaxAmountParameter, purchasePriceParameter, taxForPurchaseParameter, purchaseTaxAmountParameter, openingQtyParameter, atPriceParameter, dateParameter, cessParameter, itemLocationParameter, trackingMRPParameter, batchNoParameter, serialNoParameter, mFgdateParameter, expdateParameter, sizeParameter, descriptionParameter, minimumStockParameter, image1Parameter, image2Parameter, image3Parameter, image4Parameter, image5Parameter, unitIDParameter, categoryIDParameter, barcodeParameter, compidParameter);
        }
    
        public virtual ObjectResult<tbl_ItemServicemasterSelect_Result> tbl_ItemServicemasterSelect(string action, Nullable<int> serviceID, string itemName, string itemHSNCOde, string unit, string subunit, string itemCode, string category, Nullable<double> salePrice, string taxType, Nullable<double> taxRate, string description, byte[] image, Nullable<int> compid)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var itemHSNCOdeParameter = itemHSNCOde != null ?
                new ObjectParameter("ItemHSNCOde", itemHSNCOde) :
                new ObjectParameter("ItemHSNCOde", typeof(string));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var subunitParameter = subunit != null ?
                new ObjectParameter("Subunit", subunit) :
                new ObjectParameter("Subunit", typeof(string));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var salePriceParameter = salePrice.HasValue ?
                new ObjectParameter("SalePrice", salePrice) :
                new ObjectParameter("SalePrice", typeof(double));
    
            var taxTypeParameter = taxType != null ?
                new ObjectParameter("TaxType", taxType) :
                new ObjectParameter("TaxType", typeof(string));
    
            var taxRateParameter = taxRate.HasValue ?
                new ObjectParameter("TaxRate", taxRate) :
                new ObjectParameter("TaxRate", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(byte[]));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_ItemServicemasterSelect_Result>("tbl_ItemServicemasterSelect", actionParameter, serviceIDParameter, itemNameParameter, itemHSNCOdeParameter, unitParameter, subunitParameter, itemCodeParameter, categoryParameter, salePriceParameter, taxTypeParameter, taxRateParameter, descriptionParameter, imageParameter, compidParameter);
        }
    
        public virtual ObjectResult<tbl_LoanBankSelect_Result> tbl_LoanBankSelect(string action, Nullable<int> iD, string accountName, string accountNo, string description, string lendarBank, string firmName, Nullable<double> currentBal, Nullable<System.DateTime> balAsOf, string loanReceive, string interest, string duration, Nullable<double> processingFees, string paidBy, Nullable<int> compid, Nullable<double> loanamount, Nullable<double> total)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var lendarBankParameter = lendarBank != null ?
                new ObjectParameter("LendarBank", lendarBank) :
                new ObjectParameter("LendarBank", typeof(string));
    
            var firmNameParameter = firmName != null ?
                new ObjectParameter("FirmName", firmName) :
                new ObjectParameter("FirmName", typeof(string));
    
            var currentBalParameter = currentBal.HasValue ?
                new ObjectParameter("CurrentBal", currentBal) :
                new ObjectParameter("CurrentBal", typeof(double));
    
            var balAsOfParameter = balAsOf.HasValue ?
                new ObjectParameter("BalAsOf", balAsOf) :
                new ObjectParameter("BalAsOf", typeof(System.DateTime));
    
            var loanReceiveParameter = loanReceive != null ?
                new ObjectParameter("LoanReceive", loanReceive) :
                new ObjectParameter("LoanReceive", typeof(string));
    
            var interestParameter = interest != null ?
                new ObjectParameter("Interest", interest) :
                new ObjectParameter("Interest", typeof(string));
    
            var durationParameter = duration != null ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(string));
    
            var processingFeesParameter = processingFees.HasValue ?
                new ObjectParameter("ProcessingFees", processingFees) :
                new ObjectParameter("ProcessingFees", typeof(double));
    
            var paidByParameter = paidBy != null ?
                new ObjectParameter("PaidBy", paidBy) :
                new ObjectParameter("PaidBy", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var loanamountParameter = loanamount.HasValue ?
                new ObjectParameter("loanamount", loanamount) :
                new ObjectParameter("loanamount", typeof(double));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_LoanBankSelect_Result>("tbl_LoanBankSelect", actionParameter, iDParameter, accountNameParameter, accountNoParameter, descriptionParameter, lendarBankParameter, firmNameParameter, currentBalParameter, balAsOfParameter, loanReceiveParameter, interestParameter, durationParameter, processingFeesParameter, paidByParameter, compidParameter, loanamountParameter, totalParameter);
        }
    
        public virtual ObjectResult<tbl_LoginPassswordSelect_Result> tbl_LoginPassswordSelect(string action, Nullable<int> iD, string newPassword, string confirmPassword)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            var confirmPasswordParameter = confirmPassword != null ?
                new ObjectParameter("ConfirmPassword", confirmPassword) :
                new ObjectParameter("ConfirmPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_LoginPassswordSelect_Result>("tbl_LoginPassswordSelect", actionParameter, iDParameter, newPasswordParameter, confirmPasswordParameter);
        }
    
        public virtual ObjectResult<tbl_MakePaymentSelect_Result> tbl_MakePaymentSelect(string action, Nullable<int> iD, Nullable<double> principleAmount, Nullable<double> interestAmount, Nullable<System.DateTime> date, Nullable<double> totalAmount, string paidFrom, string accountName, Nullable<int> compid)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var principleAmountParameter = principleAmount.HasValue ?
                new ObjectParameter("PrincipleAmount", principleAmount) :
                new ObjectParameter("PrincipleAmount", typeof(double));
    
            var interestAmountParameter = interestAmount.HasValue ?
                new ObjectParameter("InterestAmount", interestAmount) :
                new ObjectParameter("InterestAmount", typeof(double));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(double));
    
            var paidFromParameter = paidFrom != null ?
                new ObjectParameter("PaidFrom", paidFrom) :
                new ObjectParameter("PaidFrom", typeof(string));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_MakePaymentSelect_Result>("tbl_MakePaymentSelect", actionParameter, iDParameter, principleAmountParameter, interestAmountParameter, dateParameter, totalAmountParameter, paidFromParameter, accountNameParameter, compidParameter);
        }
    
        public virtual ObjectResult<tbl_otherIncomeCategorySelect_Result> tbl_otherIncomeCategorySelect(string action, Nullable<int> iD, string otherIncome, Nullable<int> compid)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var otherIncomeParameter = otherIncome != null ?
                new ObjectParameter("OtherIncome", otherIncome) :
                new ObjectParameter("OtherIncome", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_otherIncomeCategorySelect_Result>("tbl_otherIncomeCategorySelect", actionParameter, iDParameter, otherIncomeParameter, compidParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tbl_OtherIncomeInnersp(string action, Nullable<int> id_inner, string itemName, Nullable<double> salePrice, Nullable<int> qty, Nullable<double> itemAmount, Nullable<int> compid, Nullable<int> id)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var id_innerParameter = id_inner.HasValue ?
                new ObjectParameter("Id_inner", id_inner) :
                new ObjectParameter("Id_inner", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var salePriceParameter = salePrice.HasValue ?
                new ObjectParameter("SalePrice", salePrice) :
                new ObjectParameter("SalePrice", typeof(double));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var itemAmountParameter = itemAmount.HasValue ?
                new ObjectParameter("ItemAmount", itemAmount) :
                new ObjectParameter("ItemAmount", typeof(double));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tbl_OtherIncomeInnersp", actionParameter, id_innerParameter, itemNameParameter, salePriceParameter, qtyParameter, itemAmountParameter, compidParameter, idParameter);
        }
    
        public virtual ObjectResult<tbl_OtherIncomeSelect_Result> tbl_OtherIncomeSelect(string action, Nullable<int> id, string incomeCategory, Nullable<System.DateTime> date, string paymentType, string description, byte[] image, Nullable<double> roundOFF, Nullable<double> total, Nullable<double> received, Nullable<double> balance, string additionalFeild1, string additional2, string additional3, string additional4, string status, string tableName, Nullable<int> compid)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var incomeCategoryParameter = incomeCategory != null ?
                new ObjectParameter("IncomeCategory", incomeCategory) :
                new ObjectParameter("IncomeCategory", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var paymentTypeParameter = paymentType != null ?
                new ObjectParameter("paymentType", paymentType) :
                new ObjectParameter("paymentType", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(byte[]));
    
            var roundOFFParameter = roundOFF.HasValue ?
                new ObjectParameter("RoundOFF", roundOFF) :
                new ObjectParameter("RoundOFF", typeof(double));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(double));
    
            var receivedParameter = received.HasValue ?
                new ObjectParameter("Received", received) :
                new ObjectParameter("Received", typeof(double));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(double));
    
            var additionalFeild1Parameter = additionalFeild1 != null ?
                new ObjectParameter("AdditionalFeild1", additionalFeild1) :
                new ObjectParameter("AdditionalFeild1", typeof(string));
    
            var additional2Parameter = additional2 != null ?
                new ObjectParameter("Additional2", additional2) :
                new ObjectParameter("Additional2", typeof(string));
    
            var additional3Parameter = additional3 != null ?
                new ObjectParameter("Additional3", additional3) :
                new ObjectParameter("Additional3", typeof(string));
    
            var additional4Parameter = additional4 != null ?
                new ObjectParameter("Additional4", additional4) :
                new ObjectParameter("Additional4", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_OtherIncomeSelect_Result>("tbl_OtherIncomeSelect", actionParameter, idParameter, incomeCategoryParameter, dateParameter, paymentTypeParameter, descriptionParameter, imageParameter, roundOFFParameter, totalParameter, receivedParameter, balanceParameter, additionalFeild1Parameter, additional2Parameter, additional3Parameter, additional4Parameter, statusParameter, tableNameParameter, compidParameter);
        }
    
        public virtual ObjectResult<tbl_PartyGroupSelect_Result> tbl_PartyGroupSelect(string action, Nullable<int> partyGroupID, string addPartyGroup, Nullable<int> compid)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var partyGroupIDParameter = partyGroupID.HasValue ?
                new ObjectParameter("PartyGroupID", partyGroupID) :
                new ObjectParameter("PartyGroupID", typeof(int));
    
            var addPartyGroupParameter = addPartyGroup != null ?
                new ObjectParameter("AddPartyGroup", addPartyGroup) :
                new ObjectParameter("AddPartyGroup", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_PartyGroupSelect_Result>("tbl_PartyGroupSelect", actionParameter, partyGroupIDParameter, addPartyGroupParameter, compidParameter);
        }
    
        public virtual ObjectResult<tbl_PartyMasterSelect_Result> tbl_PartyMasterSelect(string action, Nullable<int> partiesID, string partyName, string contactNo, string billingAddress, string emailID, string gSTType, string state, Nullable<double> openingBal, Nullable<System.DateTime> asOfDate, string addRemainder, string partyType, string shippingAddress, string partyGroup, Nullable<int> compid, string paidstatus, string type)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var partiesIDParameter = partiesID.HasValue ?
                new ObjectParameter("PartiesID", partiesID) :
                new ObjectParameter("PartiesID", typeof(int));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var billingAddressParameter = billingAddress != null ?
                new ObjectParameter("BillingAddress", billingAddress) :
                new ObjectParameter("BillingAddress", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var gSTTypeParameter = gSTType != null ?
                new ObjectParameter("GSTType", gSTType) :
                new ObjectParameter("GSTType", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var openingBalParameter = openingBal.HasValue ?
                new ObjectParameter("OpeningBal", openingBal) :
                new ObjectParameter("OpeningBal", typeof(double));
    
            var asOfDateParameter = asOfDate.HasValue ?
                new ObjectParameter("AsOfDate", asOfDate) :
                new ObjectParameter("AsOfDate", typeof(System.DateTime));
    
            var addRemainderParameter = addRemainder != null ?
                new ObjectParameter("AddRemainder", addRemainder) :
                new ObjectParameter("AddRemainder", typeof(string));
    
            var partyTypeParameter = partyType != null ?
                new ObjectParameter("PartyType", partyType) :
                new ObjectParameter("PartyType", typeof(string));
    
            var shippingAddressParameter = shippingAddress != null ?
                new ObjectParameter("ShippingAddress", shippingAddress) :
                new ObjectParameter("ShippingAddress", typeof(string));
    
            var partyGroupParameter = partyGroup != null ?
                new ObjectParameter("PartyGroup", partyGroup) :
                new ObjectParameter("PartyGroup", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var paidstatusParameter = paidstatus != null ?
                new ObjectParameter("paidstatus", paidstatus) :
                new ObjectParameter("paidstatus", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_PartyMasterSelect_Result>("tbl_PartyMasterSelect", actionParameter, partiesIDParameter, partyNameParameter, contactNoParameter, billingAddressParameter, emailIDParameter, gSTTypeParameter, stateParameter, openingBalParameter, asOfDateParameter, addRemainderParameter, partyTypeParameter, shippingAddressParameter, partyGroupParameter, compidParameter, paidstatusParameter, typeParameter);
        }
    
        public virtual ObjectResult<tbl_PaymentInSelect_Result> tbl_PaymentInSelect(string action, Nullable<int> iD, string customerName, string paymentType, Nullable<int> receiptNo, Nullable<System.DateTime> date, string description, Nullable<double> receivedAmount, Nullable<double> unusedAmount, byte[] image, Nullable<double> total, string status, string tableName, Nullable<int> compid)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var paymentTypeParameter = paymentType != null ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(string));
    
            var receiptNoParameter = receiptNo.HasValue ?
                new ObjectParameter("ReceiptNo", receiptNo) :
                new ObjectParameter("ReceiptNo", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var receivedAmountParameter = receivedAmount.HasValue ?
                new ObjectParameter("ReceivedAmount", receivedAmount) :
                new ObjectParameter("ReceivedAmount", typeof(double));
    
            var unusedAmountParameter = unusedAmount.HasValue ?
                new ObjectParameter("UnusedAmount", unusedAmount) :
                new ObjectParameter("UnusedAmount", typeof(double));
    
            var imageParameter = image != null ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(byte[]));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(double));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_PaymentInSelect_Result>("tbl_PaymentInSelect", actionParameter, iDParameter, customerNameParameter, paymentTypeParameter, receiptNoParameter, dateParameter, descriptionParameter, receivedAmountParameter, unusedAmountParameter, imageParameter, totalParameter, statusParameter, tableNameParameter, compidParameter);
        }
    
        public virtual ObjectResult<tbl_PaymentLinkselect_Result> tbl_PaymentLinkselect(string action, Nullable<int> iD, string customerName, string received, Nullable<System.DateTime> date, string type, string invoiceNo, Nullable<double> total, Nullable<double> balanceAmount, Nullable<double> linkAmount, Nullable<double> unusedCash, string additinalFeild1, string additionalFeild2, Nullable<int> compid)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var receivedParameter = received != null ?
                new ObjectParameter("Received", received) :
                new ObjectParameter("Received", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(double));
    
            var balanceAmountParameter = balanceAmount.HasValue ?
                new ObjectParameter("BalanceAmount", balanceAmount) :
                new ObjectParameter("BalanceAmount", typeof(double));
    
            var linkAmountParameter = linkAmount.HasValue ?
                new ObjectParameter("LinkAmount", linkAmount) :
                new ObjectParameter("LinkAmount", typeof(double));
    
            var unusedCashParameter = unusedCash.HasValue ?
                new ObjectParameter("UnusedCash", unusedCash) :
                new ObjectParameter("UnusedCash", typeof(double));
    
            var additinalFeild1Parameter = additinalFeild1 != null ?
                new ObjectParameter("AdditinalFeild1", additinalFeild1) :
                new ObjectParameter("AdditinalFeild1", typeof(string));
    
            var additionalFeild2Parameter = additionalFeild2 != null ?
                new ObjectParameter("AdditionalFeild2", additionalFeild2) :
                new ObjectParameter("AdditionalFeild2", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_PaymentLinkselect_Result>("tbl_PaymentLinkselect", actionParameter, iDParameter, customerNameParameter, receivedParameter, dateParameter, typeParameter, invoiceNoParameter, totalParameter, balanceAmountParameter, linkAmountParameter, unusedCashParameter, additinalFeild1Parameter, additionalFeild2Parameter, compidParameter);
        }
    
        public virtual ObjectResult<tbl_Paymentoutselect_Result> tbl_Paymentoutselect(string action, Nullable<int> iD, string customerName, string paymentType, Nullable<int> receiptNo, Nullable<System.DateTime> date, string description, Nullable<double> paid, Nullable<double> discount, Nullable<double> total, byte[] image, string tableName, string status, Nullable<int> compid)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var paymentTypeParameter = paymentType != null ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(string));
    
            var receiptNoParameter = receiptNo.HasValue ?
                new ObjectParameter("ReceiptNo", receiptNo) :
                new ObjectParameter("ReceiptNo", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var paidParameter = paid.HasValue ?
                new ObjectParameter("Paid", paid) :
                new ObjectParameter("Paid", typeof(double));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(double));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(double));
    
            var imageParameter = image != null ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(byte[]));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_Paymentoutselect_Result>("tbl_Paymentoutselect", actionParameter, iDParameter, customerNameParameter, paymentTypeParameter, receiptNoParameter, dateParameter, descriptionParameter, paidParameter, discountParameter, totalParameter, imageParameter, tableNameParameter, statusParameter, compidParameter);
        }
    
        public virtual ObjectResult<tbl_PurchaseBillInnersp_Result> tbl_PurchaseBillInnersp(string action, Nullable<int> iD, Nullable<int> itemID, string categoryType, string itemName, string basicUnit, string itemCode, Nullable<double> salePrice, string taxForSale, Nullable<double> saleTaxAmount, Nullable<int> qty, Nullable<int> freeQty, Nullable<double> itemAmount, Nullable<int> billNo, string discount, Nullable<double> discountAmount, Nullable<int> compid, Nullable<double> stock, string month, Nullable<double> cgst, Nullable<double> sgst, Nullable<double> igst, Nullable<double> caltotal)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var categoryTypeParameter = categoryType != null ?
                new ObjectParameter("CategoryType", categoryType) :
                new ObjectParameter("CategoryType", typeof(string));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var basicUnitParameter = basicUnit != null ?
                new ObjectParameter("BasicUnit", basicUnit) :
                new ObjectParameter("BasicUnit", typeof(string));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var salePriceParameter = salePrice.HasValue ?
                new ObjectParameter("SalePrice", salePrice) :
                new ObjectParameter("SalePrice", typeof(double));
    
            var taxForSaleParameter = taxForSale != null ?
                new ObjectParameter("TaxForSale", taxForSale) :
                new ObjectParameter("TaxForSale", typeof(string));
    
            var saleTaxAmountParameter = saleTaxAmount.HasValue ?
                new ObjectParameter("SaleTaxAmount", saleTaxAmount) :
                new ObjectParameter("SaleTaxAmount", typeof(double));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var freeQtyParameter = freeQty.HasValue ?
                new ObjectParameter("freeQty", freeQty) :
                new ObjectParameter("freeQty", typeof(int));
    
            var itemAmountParameter = itemAmount.HasValue ?
                new ObjectParameter("ItemAmount", itemAmount) :
                new ObjectParameter("ItemAmount", typeof(double));
    
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(int));
    
            var discountParameter = discount != null ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(string));
    
            var discountAmountParameter = discountAmount.HasValue ?
                new ObjectParameter("DiscountAmount", discountAmount) :
                new ObjectParameter("DiscountAmount", typeof(double));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("stock", stock) :
                new ObjectParameter("stock", typeof(double));
    
            var monthParameter = month != null ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(string));
    
            var cgstParameter = cgst.HasValue ?
                new ObjectParameter("cgst", cgst) :
                new ObjectParameter("cgst", typeof(double));
    
            var sgstParameter = sgst.HasValue ?
                new ObjectParameter("sgst", sgst) :
                new ObjectParameter("sgst", typeof(double));
    
            var igstParameter = igst.HasValue ?
                new ObjectParameter("igst", igst) :
                new ObjectParameter("igst", typeof(double));
    
            var caltotalParameter = caltotal.HasValue ?
                new ObjectParameter("caltotal", caltotal) :
                new ObjectParameter("caltotal", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_PurchaseBillInnersp_Result>("tbl_PurchaseBillInnersp", actionParameter, iDParameter, itemIDParameter, categoryTypeParameter, itemNameParameter, basicUnitParameter, itemCodeParameter, salePriceParameter, taxForSaleParameter, saleTaxAmountParameter, qtyParameter, freeQtyParameter, itemAmountParameter, billNoParameter, discountParameter, discountAmountParameter, compidParameter, stockParameter, monthParameter, cgstParameter, sgstParameter, igstParameter, caltotalParameter);
        }
    
        public virtual ObjectResult<tbl_PurchaseBillselect_Result> tbl_PurchaseBillselect(string action, Nullable<int> billNo, string pONo, string partyName, string billingName, string contactNo, Nullable<System.DateTime> billDate, Nullable<System.DateTime> poDate, Nullable<System.DateTime> dueDate, string stateofSupply, string paymentType, string transportName, string deliveryLocation, string vehicleNumber, Nullable<System.DateTime> deliverydate, string description, Nullable<double> transportCharges, byte[] image, string tax1, Nullable<double> cGST, Nullable<double> sGST, Nullable<double> taxAmount1, string totalDiscount, Nullable<double> discountAmount1, Nullable<double> roundFigure, Nullable<double> total, Nullable<double> paid, Nullable<double> remainingBal, string paymentTerms, string feild1, string feild2, string feild3, string feild4, string feild5, string status, string tableName, Nullable<int> iD, string barcode, string itemCategory, Nullable<double> iGST, Nullable<int> compid, Nullable<double> discount, Nullable<double> taxShow, Nullable<double> reverschecharges, Nullable<double> calTotal)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("BillNo", billNo) :
                new ObjectParameter("BillNo", typeof(int));
    
            var pONoParameter = pONo != null ?
                new ObjectParameter("PONo", pONo) :
                new ObjectParameter("PONo", typeof(string));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var billingNameParameter = billingName != null ?
                new ObjectParameter("BillingName", billingName) :
                new ObjectParameter("BillingName", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var billDateParameter = billDate.HasValue ?
                new ObjectParameter("BillDate", billDate) :
                new ObjectParameter("BillDate", typeof(System.DateTime));
    
            var poDateParameter = poDate.HasValue ?
                new ObjectParameter("PoDate", poDate) :
                new ObjectParameter("PoDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var stateofSupplyParameter = stateofSupply != null ?
                new ObjectParameter("StateofSupply", stateofSupply) :
                new ObjectParameter("StateofSupply", typeof(string));
    
            var paymentTypeParameter = paymentType != null ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(string));
    
            var transportNameParameter = transportName != null ?
                new ObjectParameter("TransportName", transportName) :
                new ObjectParameter("TransportName", typeof(string));
    
            var deliveryLocationParameter = deliveryLocation != null ?
                new ObjectParameter("DeliveryLocation", deliveryLocation) :
                new ObjectParameter("DeliveryLocation", typeof(string));
    
            var vehicleNumberParameter = vehicleNumber != null ?
                new ObjectParameter("VehicleNumber", vehicleNumber) :
                new ObjectParameter("VehicleNumber", typeof(string));
    
            var deliverydateParameter = deliverydate.HasValue ?
                new ObjectParameter("Deliverydate", deliverydate) :
                new ObjectParameter("Deliverydate", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var transportChargesParameter = transportCharges.HasValue ?
                new ObjectParameter("TransportCharges", transportCharges) :
                new ObjectParameter("TransportCharges", typeof(double));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(byte[]));
    
            var tax1Parameter = tax1 != null ?
                new ObjectParameter("Tax1", tax1) :
                new ObjectParameter("Tax1", typeof(string));
    
            var cGSTParameter = cGST.HasValue ?
                new ObjectParameter("CGST", cGST) :
                new ObjectParameter("CGST", typeof(double));
    
            var sGSTParameter = sGST.HasValue ?
                new ObjectParameter("SGST", sGST) :
                new ObjectParameter("SGST", typeof(double));
    
            var taxAmount1Parameter = taxAmount1.HasValue ?
                new ObjectParameter("TaxAmount1", taxAmount1) :
                new ObjectParameter("TaxAmount1", typeof(double));
    
            var totalDiscountParameter = totalDiscount != null ?
                new ObjectParameter("TotalDiscount", totalDiscount) :
                new ObjectParameter("TotalDiscount", typeof(string));
    
            var discountAmount1Parameter = discountAmount1.HasValue ?
                new ObjectParameter("DiscountAmount1", discountAmount1) :
                new ObjectParameter("DiscountAmount1", typeof(double));
    
            var roundFigureParameter = roundFigure.HasValue ?
                new ObjectParameter("RoundFigure", roundFigure) :
                new ObjectParameter("RoundFigure", typeof(double));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(double));
    
            var paidParameter = paid.HasValue ?
                new ObjectParameter("Paid", paid) :
                new ObjectParameter("Paid", typeof(double));
    
            var remainingBalParameter = remainingBal.HasValue ?
                new ObjectParameter("RemainingBal", remainingBal) :
                new ObjectParameter("RemainingBal", typeof(double));
    
            var paymentTermsParameter = paymentTerms != null ?
                new ObjectParameter("PaymentTerms", paymentTerms) :
                new ObjectParameter("PaymentTerms", typeof(string));
    
            var feild1Parameter = feild1 != null ?
                new ObjectParameter("Feild1", feild1) :
                new ObjectParameter("Feild1", typeof(string));
    
            var feild2Parameter = feild2 != null ?
                new ObjectParameter("Feild2", feild2) :
                new ObjectParameter("Feild2", typeof(string));
    
            var feild3Parameter = feild3 != null ?
                new ObjectParameter("Feild3", feild3) :
                new ObjectParameter("Feild3", typeof(string));
    
            var feild4Parameter = feild4 != null ?
                new ObjectParameter("Feild4", feild4) :
                new ObjectParameter("Feild4", typeof(string));
    
            var feild5Parameter = feild5 != null ?
                new ObjectParameter("Feild5", feild5) :
                new ObjectParameter("Feild5", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var itemCategoryParameter = itemCategory != null ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(string));
    
            var iGSTParameter = iGST.HasValue ?
                new ObjectParameter("IGST", iGST) :
                new ObjectParameter("IGST", typeof(double));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(double));
    
            var taxShowParameter = taxShow.HasValue ?
                new ObjectParameter("TaxShow", taxShow) :
                new ObjectParameter("TaxShow", typeof(double));
    
            var reverschechargesParameter = reverschecharges.HasValue ?
                new ObjectParameter("reverschecharges", reverschecharges) :
                new ObjectParameter("reverschecharges", typeof(double));
    
            var calTotalParameter = calTotal.HasValue ?
                new ObjectParameter("CalTotal", calTotal) :
                new ObjectParameter("CalTotal", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_PurchaseBillselect_Result>("tbl_PurchaseBillselect", actionParameter, billNoParameter, pONoParameter, partyNameParameter, billingNameParameter, contactNoParameter, billDateParameter, poDateParameter, dueDateParameter, stateofSupplyParameter, paymentTypeParameter, transportNameParameter, deliveryLocationParameter, vehicleNumberParameter, deliverydateParameter, descriptionParameter, transportChargesParameter, imageParameter, tax1Parameter, cGSTParameter, sGSTParameter, taxAmount1Parameter, totalDiscountParameter, discountAmount1Parameter, roundFigureParameter, totalParameter, paidParameter, remainingBalParameter, paymentTermsParameter, feild1Parameter, feild2Parameter, feild3Parameter, feild4Parameter, feild5Parameter, statusParameter, tableNameParameter, iDParameter, barcodeParameter, itemCategoryParameter, iGSTParameter, compidParameter, discountParameter, taxShowParameter, reverschechargesParameter, calTotalParameter);
        }
    
        public virtual ObjectResult<tbl_PurchaseOrderInnersp_Result> tbl_PurchaseOrderInnersp(string action, Nullable<int> iD, Nullable<int> itemID, string categoryType, string itemName, string basicUnit, string itemCode, Nullable<double> salePrice, string taxForSale, Nullable<double> saleTaxAmount, Nullable<int> qty, Nullable<int> freeQty, Nullable<double> itemAmount, Nullable<int> orderNo, string discount, Nullable<double> discountAmount, Nullable<int> compid, Nullable<double> cgst, Nullable<double> sgst, Nullable<double> igst, Nullable<double> itemTotal)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var categoryTypeParameter = categoryType != null ?
                new ObjectParameter("CategoryType", categoryType) :
                new ObjectParameter("CategoryType", typeof(string));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var basicUnitParameter = basicUnit != null ?
                new ObjectParameter("BasicUnit", basicUnit) :
                new ObjectParameter("BasicUnit", typeof(string));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var salePriceParameter = salePrice.HasValue ?
                new ObjectParameter("SalePrice", salePrice) :
                new ObjectParameter("SalePrice", typeof(double));
    
            var taxForSaleParameter = taxForSale != null ?
                new ObjectParameter("TaxForSale", taxForSale) :
                new ObjectParameter("TaxForSale", typeof(string));
    
            var saleTaxAmountParameter = saleTaxAmount.HasValue ?
                new ObjectParameter("SaleTaxAmount", saleTaxAmount) :
                new ObjectParameter("SaleTaxAmount", typeof(double));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var freeQtyParameter = freeQty.HasValue ?
                new ObjectParameter("freeQty", freeQty) :
                new ObjectParameter("freeQty", typeof(int));
    
            var itemAmountParameter = itemAmount.HasValue ?
                new ObjectParameter("ItemAmount", itemAmount) :
                new ObjectParameter("ItemAmount", typeof(double));
    
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            var discountParameter = discount != null ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(string));
    
            var discountAmountParameter = discountAmount.HasValue ?
                new ObjectParameter("DiscountAmount", discountAmount) :
                new ObjectParameter("DiscountAmount", typeof(double));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var cgstParameter = cgst.HasValue ?
                new ObjectParameter("cgst", cgst) :
                new ObjectParameter("cgst", typeof(double));
    
            var sgstParameter = sgst.HasValue ?
                new ObjectParameter("sgst", sgst) :
                new ObjectParameter("sgst", typeof(double));
    
            var igstParameter = igst.HasValue ?
                new ObjectParameter("igst", igst) :
                new ObjectParameter("igst", typeof(double));
    
            var itemTotalParameter = itemTotal.HasValue ?
                new ObjectParameter("ItemTotal", itemTotal) :
                new ObjectParameter("ItemTotal", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_PurchaseOrderInnersp_Result>("tbl_PurchaseOrderInnersp", actionParameter, iDParameter, itemIDParameter, categoryTypeParameter, itemNameParameter, basicUnitParameter, itemCodeParameter, salePriceParameter, taxForSaleParameter, saleTaxAmountParameter, qtyParameter, freeQtyParameter, itemAmountParameter, orderNoParameter, discountParameter, discountAmountParameter, compidParameter, cgstParameter, sgstParameter, igstParameter, itemTotalParameter);
        }
    
        public virtual ObjectResult<tbl_PurchaseOrderSelect_Result> tbl_PurchaseOrderSelect(string action, Nullable<int> iD, Nullable<int> orderNo, string partyName, string billingName, string contactNo, Nullable<System.DateTime> orderDate, Nullable<System.DateTime> dueDate, string stateofSupply, string paymentType, string transportName, string deliveryLocation, string vehicleNumber, Nullable<System.DateTime> deliverydate, string description, Nullable<double> transportCharges, byte[] image, string tax1, Nullable<double> cGST, Nullable<double> sGST, Nullable<double> taxAmount1, Nullable<int> totalDiscount, Nullable<double> discountAmount1, Nullable<double> roundFigure, Nullable<double> total, Nullable<double> paid, Nullable<double> remainingBal, string paymentTerms, string feild1, string feild2, string feild3, string feild4, string feild5, string status, string tableName, string barcode, Nullable<double> iGST, string itemCategory, Nullable<int> compid, Nullable<double> calotal, Nullable<double> taxshow, Nullable<double> discount)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var billingNameParameter = billingName != null ?
                new ObjectParameter("BillingName", billingName) :
                new ObjectParameter("BillingName", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var stateofSupplyParameter = stateofSupply != null ?
                new ObjectParameter("StateofSupply", stateofSupply) :
                new ObjectParameter("StateofSupply", typeof(string));
    
            var paymentTypeParameter = paymentType != null ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(string));
    
            var transportNameParameter = transportName != null ?
                new ObjectParameter("TransportName", transportName) :
                new ObjectParameter("TransportName", typeof(string));
    
            var deliveryLocationParameter = deliveryLocation != null ?
                new ObjectParameter("DeliveryLocation", deliveryLocation) :
                new ObjectParameter("DeliveryLocation", typeof(string));
    
            var vehicleNumberParameter = vehicleNumber != null ?
                new ObjectParameter("VehicleNumber", vehicleNumber) :
                new ObjectParameter("VehicleNumber", typeof(string));
    
            var deliverydateParameter = deliverydate.HasValue ?
                new ObjectParameter("Deliverydate", deliverydate) :
                new ObjectParameter("Deliverydate", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var transportChargesParameter = transportCharges.HasValue ?
                new ObjectParameter("TransportCharges", transportCharges) :
                new ObjectParameter("TransportCharges", typeof(double));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(byte[]));
    
            var tax1Parameter = tax1 != null ?
                new ObjectParameter("Tax1", tax1) :
                new ObjectParameter("Tax1", typeof(string));
    
            var cGSTParameter = cGST.HasValue ?
                new ObjectParameter("CGST", cGST) :
                new ObjectParameter("CGST", typeof(double));
    
            var sGSTParameter = sGST.HasValue ?
                new ObjectParameter("SGST", sGST) :
                new ObjectParameter("SGST", typeof(double));
    
            var taxAmount1Parameter = taxAmount1.HasValue ?
                new ObjectParameter("TaxAmount1", taxAmount1) :
                new ObjectParameter("TaxAmount1", typeof(double));
    
            var totalDiscountParameter = totalDiscount.HasValue ?
                new ObjectParameter("TotalDiscount", totalDiscount) :
                new ObjectParameter("TotalDiscount", typeof(int));
    
            var discountAmount1Parameter = discountAmount1.HasValue ?
                new ObjectParameter("DiscountAmount1", discountAmount1) :
                new ObjectParameter("DiscountAmount1", typeof(double));
    
            var roundFigureParameter = roundFigure.HasValue ?
                new ObjectParameter("RoundFigure", roundFigure) :
                new ObjectParameter("RoundFigure", typeof(double));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(double));
    
            var paidParameter = paid.HasValue ?
                new ObjectParameter("Paid", paid) :
                new ObjectParameter("Paid", typeof(double));
    
            var remainingBalParameter = remainingBal.HasValue ?
                new ObjectParameter("RemainingBal", remainingBal) :
                new ObjectParameter("RemainingBal", typeof(double));
    
            var paymentTermsParameter = paymentTerms != null ?
                new ObjectParameter("PaymentTerms", paymentTerms) :
                new ObjectParameter("PaymentTerms", typeof(string));
    
            var feild1Parameter = feild1 != null ?
                new ObjectParameter("Feild1", feild1) :
                new ObjectParameter("Feild1", typeof(string));
    
            var feild2Parameter = feild2 != null ?
                new ObjectParameter("Feild2", feild2) :
                new ObjectParameter("Feild2", typeof(string));
    
            var feild3Parameter = feild3 != null ?
                new ObjectParameter("Feild3", feild3) :
                new ObjectParameter("Feild3", typeof(string));
    
            var feild4Parameter = feild4 != null ?
                new ObjectParameter("Feild4", feild4) :
                new ObjectParameter("Feild4", typeof(string));
    
            var feild5Parameter = feild5 != null ?
                new ObjectParameter("Feild5", feild5) :
                new ObjectParameter("Feild5", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var iGSTParameter = iGST.HasValue ?
                new ObjectParameter("IGST", iGST) :
                new ObjectParameter("IGST", typeof(double));
    
            var itemCategoryParameter = itemCategory != null ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var calotalParameter = calotal.HasValue ?
                new ObjectParameter("calotal", calotal) :
                new ObjectParameter("calotal", typeof(double));
    
            var taxshowParameter = taxshow.HasValue ?
                new ObjectParameter("taxshow", taxshow) :
                new ObjectParameter("taxshow", typeof(double));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("discount", discount) :
                new ObjectParameter("discount", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_PurchaseOrderSelect_Result>("tbl_PurchaseOrderSelect", actionParameter, iDParameter, orderNoParameter, partyNameParameter, billingNameParameter, contactNoParameter, orderDateParameter, dueDateParameter, stateofSupplyParameter, paymentTypeParameter, transportNameParameter, deliveryLocationParameter, vehicleNumberParameter, deliverydateParameter, descriptionParameter, transportChargesParameter, imageParameter, tax1Parameter, cGSTParameter, sGSTParameter, taxAmount1Parameter, totalDiscountParameter, discountAmount1Parameter, roundFigureParameter, totalParameter, paidParameter, remainingBalParameter, paymentTermsParameter, feild1Parameter, feild2Parameter, feild3Parameter, feild4Parameter, feild5Parameter, statusParameter, tableNameParameter, barcodeParameter, iGSTParameter, itemCategoryParameter, compidParameter, calotalParameter, taxshowParameter, discountParameter);
        }
    
        public virtual ObjectResult<tbl_QuotationInnersp_Result> tbl_QuotationInnersp(string action, Nullable<int> iD, Nullable<int> itemID, string categoryType, string itemName, string basicUnit, string itemCode, Nullable<double> salePrice, string taxForSale, Nullable<double> saleTaxAmount, Nullable<int> qty, Nullable<int> freeQty, Nullable<double> itemAmount, string discount, Nullable<double> discountAmount, Nullable<int> compid, Nullable<int> refNo, Nullable<double> cGST, Nullable<double> sGST, Nullable<double> iGST, Nullable<double> calTotal)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var categoryTypeParameter = categoryType != null ?
                new ObjectParameter("CategoryType", categoryType) :
                new ObjectParameter("CategoryType", typeof(string));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var basicUnitParameter = basicUnit != null ?
                new ObjectParameter("BasicUnit", basicUnit) :
                new ObjectParameter("BasicUnit", typeof(string));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var salePriceParameter = salePrice.HasValue ?
                new ObjectParameter("SalePrice", salePrice) :
                new ObjectParameter("SalePrice", typeof(double));
    
            var taxForSaleParameter = taxForSale != null ?
                new ObjectParameter("TaxForSale", taxForSale) :
                new ObjectParameter("TaxForSale", typeof(string));
    
            var saleTaxAmountParameter = saleTaxAmount.HasValue ?
                new ObjectParameter("SaleTaxAmount", saleTaxAmount) :
                new ObjectParameter("SaleTaxAmount", typeof(double));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var freeQtyParameter = freeQty.HasValue ?
                new ObjectParameter("freeQty", freeQty) :
                new ObjectParameter("freeQty", typeof(int));
    
            var itemAmountParameter = itemAmount.HasValue ?
                new ObjectParameter("ItemAmount", itemAmount) :
                new ObjectParameter("ItemAmount", typeof(double));
    
            var discountParameter = discount != null ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(string));
    
            var discountAmountParameter = discountAmount.HasValue ?
                new ObjectParameter("DiscountAmount", discountAmount) :
                new ObjectParameter("DiscountAmount", typeof(double));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var refNoParameter = refNo.HasValue ?
                new ObjectParameter("RefNo", refNo) :
                new ObjectParameter("RefNo", typeof(int));
    
            var cGSTParameter = cGST.HasValue ?
                new ObjectParameter("CGST", cGST) :
                new ObjectParameter("CGST", typeof(double));
    
            var sGSTParameter = sGST.HasValue ?
                new ObjectParameter("SGST", sGST) :
                new ObjectParameter("SGST", typeof(double));
    
            var iGSTParameter = iGST.HasValue ?
                new ObjectParameter("IGST", iGST) :
                new ObjectParameter("IGST", typeof(double));
    
            var calTotalParameter = calTotal.HasValue ?
                new ObjectParameter("CalTotal", calTotal) :
                new ObjectParameter("CalTotal", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_QuotationInnersp_Result>("tbl_QuotationInnersp", actionParameter, iDParameter, itemIDParameter, categoryTypeParameter, itemNameParameter, basicUnitParameter, itemCodeParameter, salePriceParameter, taxForSaleParameter, saleTaxAmountParameter, qtyParameter, freeQtyParameter, itemAmountParameter, discountParameter, discountAmountParameter, compidParameter, refNoParameter, cGSTParameter, sGSTParameter, iGSTParameter, calTotalParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tbl_QuotationSelect(string action, Nullable<int> refNo, string partyName, string billingAddress, Nullable<System.DateTime> date, string stateofSupply, string contactNo, string description, byte[] image, string tax1, Nullable<double> taxAmount1, Nullable<double> cGST, Nullable<double> sGST, Nullable<int> totalDiscount, Nullable<double> discountAmount1, Nullable<double> roundFigure, Nullable<double> total, string feild1, string feild2, string feild3, string feild4, string feild5, string status, string tableName, Nullable<int> iD, string barcode, Nullable<int> compid, string itemcatgory, Nullable<double> calTotal, Nullable<double> taxShow, Nullable<double> discount)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var refNoParameter = refNo.HasValue ?
                new ObjectParameter("RefNo", refNo) :
                new ObjectParameter("RefNo", typeof(int));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var billingAddressParameter = billingAddress != null ?
                new ObjectParameter("BillingAddress", billingAddress) :
                new ObjectParameter("BillingAddress", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var stateofSupplyParameter = stateofSupply != null ?
                new ObjectParameter("StateofSupply", stateofSupply) :
                new ObjectParameter("StateofSupply", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(byte[]));
    
            var tax1Parameter = tax1 != null ?
                new ObjectParameter("Tax1", tax1) :
                new ObjectParameter("Tax1", typeof(string));
    
            var taxAmount1Parameter = taxAmount1.HasValue ?
                new ObjectParameter("TaxAmount1", taxAmount1) :
                new ObjectParameter("TaxAmount1", typeof(double));
    
            var cGSTParameter = cGST.HasValue ?
                new ObjectParameter("CGST", cGST) :
                new ObjectParameter("CGST", typeof(double));
    
            var sGSTParameter = sGST.HasValue ?
                new ObjectParameter("SGST", sGST) :
                new ObjectParameter("SGST", typeof(double));
    
            var totalDiscountParameter = totalDiscount.HasValue ?
                new ObjectParameter("TotalDiscount", totalDiscount) :
                new ObjectParameter("TotalDiscount", typeof(int));
    
            var discountAmount1Parameter = discountAmount1.HasValue ?
                new ObjectParameter("DiscountAmount1", discountAmount1) :
                new ObjectParameter("DiscountAmount1", typeof(double));
    
            var roundFigureParameter = roundFigure.HasValue ?
                new ObjectParameter("RoundFigure", roundFigure) :
                new ObjectParameter("RoundFigure", typeof(double));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(double));
    
            var feild1Parameter = feild1 != null ?
                new ObjectParameter("Feild1", feild1) :
                new ObjectParameter("Feild1", typeof(string));
    
            var feild2Parameter = feild2 != null ?
                new ObjectParameter("Feild2", feild2) :
                new ObjectParameter("Feild2", typeof(string));
    
            var feild3Parameter = feild3 != null ?
                new ObjectParameter("Feild3", feild3) :
                new ObjectParameter("Feild3", typeof(string));
    
            var feild4Parameter = feild4 != null ?
                new ObjectParameter("Feild4", feild4) :
                new ObjectParameter("Feild4", typeof(string));
    
            var feild5Parameter = feild5 != null ?
                new ObjectParameter("Feild5", feild5) :
                new ObjectParameter("Feild5", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var itemcatgoryParameter = itemcatgory != null ?
                new ObjectParameter("Itemcatgory", itemcatgory) :
                new ObjectParameter("Itemcatgory", typeof(string));
    
            var calTotalParameter = calTotal.HasValue ?
                new ObjectParameter("CalTotal", calTotal) :
                new ObjectParameter("CalTotal", typeof(double));
    
            var taxShowParameter = taxShow.HasValue ?
                new ObjectParameter("TaxShow", taxShow) :
                new ObjectParameter("TaxShow", typeof(double));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tbl_QuotationSelect", actionParameter, refNoParameter, partyNameParameter, billingAddressParameter, dateParameter, stateofSupplyParameter, contactNoParameter, descriptionParameter, imageParameter, tax1Parameter, taxAmount1Parameter, cGSTParameter, sGSTParameter, totalDiscountParameter, discountAmount1Parameter, roundFigureParameter, totalParameter, feild1Parameter, feild2Parameter, feild3Parameter, feild4Parameter, feild5Parameter, statusParameter, tableNameParameter, iDParameter, barcodeParameter, compidParameter, itemcatgoryParameter, calTotalParameter, taxShowParameter, discountParameter);
        }
    
        public virtual ObjectResult<tbl_SaleInvoiceInnersp_Result> tbl_SaleInvoiceInnersp(string action, Nullable<int> iD, Nullable<int> itemID, string itemName, string basicUnit, string itemCode, Nullable<double> salePrice, string taxForSale, Nullable<double> saleTaxAmount, Nullable<int> qty, Nullable<int> freeQty, Nullable<double> itemAmount, string discount, Nullable<double> discountAmount, Nullable<int> compid, Nullable<int> invoiceID, Nullable<double> stock, Nullable<int> count, Nullable<double> itemTotal, Nullable<double> cgst, Nullable<double> sgst, Nullable<double> igst)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var basicUnitParameter = basicUnit != null ?
                new ObjectParameter("BasicUnit", basicUnit) :
                new ObjectParameter("BasicUnit", typeof(string));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var salePriceParameter = salePrice.HasValue ?
                new ObjectParameter("SalePrice", salePrice) :
                new ObjectParameter("SalePrice", typeof(double));
    
            var taxForSaleParameter = taxForSale != null ?
                new ObjectParameter("TaxForSale", taxForSale) :
                new ObjectParameter("TaxForSale", typeof(string));
    
            var saleTaxAmountParameter = saleTaxAmount.HasValue ?
                new ObjectParameter("SaleTaxAmount", saleTaxAmount) :
                new ObjectParameter("SaleTaxAmount", typeof(double));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var freeQtyParameter = freeQty.HasValue ?
                new ObjectParameter("freeQty", freeQty) :
                new ObjectParameter("freeQty", typeof(int));
    
            var itemAmountParameter = itemAmount.HasValue ?
                new ObjectParameter("ItemAmount", itemAmount) :
                new ObjectParameter("ItemAmount", typeof(double));
    
            var discountParameter = discount != null ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(string));
    
            var discountAmountParameter = discountAmount.HasValue ?
                new ObjectParameter("DiscountAmount", discountAmount) :
                new ObjectParameter("DiscountAmount", typeof(double));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("stock", stock) :
                new ObjectParameter("stock", typeof(double));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(int));
    
            var itemTotalParameter = itemTotal.HasValue ?
                new ObjectParameter("ItemTotal", itemTotal) :
                new ObjectParameter("ItemTotal", typeof(double));
    
            var cgstParameter = cgst.HasValue ?
                new ObjectParameter("cgst", cgst) :
                new ObjectParameter("cgst", typeof(double));
    
            var sgstParameter = sgst.HasValue ?
                new ObjectParameter("sgst", sgst) :
                new ObjectParameter("sgst", typeof(double));
    
            var igstParameter = igst.HasValue ?
                new ObjectParameter("igst", igst) :
                new ObjectParameter("igst", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_SaleInvoiceInnersp_Result>("tbl_SaleInvoiceInnersp", actionParameter, iDParameter, itemIDParameter, itemNameParameter, basicUnitParameter, itemCodeParameter, salePriceParameter, taxForSaleParameter, saleTaxAmountParameter, qtyParameter, freeQtyParameter, itemAmountParameter, discountParameter, discountAmountParameter, compidParameter, invoiceIDParameter, stockParameter, countParameter, itemTotalParameter, cgstParameter, sgstParameter, igstParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tbl_SaleInvoiceSelect(string action, Nullable<int> invoiceID, string partyName, string billingName, string contactNo, string poNumber, Nullable<System.DateTime> poDate, Nullable<System.DateTime> invoiceDate, string stateofSupply, string paymentType, string transportName, string deliveryLocation, string vehicleNumber, Nullable<System.DateTime> deliverydate, string description, Nullable<double> transportCharges, byte[] image, string tax1, Nullable<double> cGST, Nullable<double> sGST, Nullable<double> taxAmount1, string totalDiscount, Nullable<double> discountAmount1, Nullable<double> roundFigure, Nullable<double> total, Nullable<double> received, Nullable<double> remainingBal, Nullable<System.DateTime> dueDate, string paymentTerms, string feild1, string feild2, string feild3, string feild4, string feild5, string status, string tableName, Nullable<int> iD, string itemCategory, string barcode, Nullable<double> iGST, Nullable<int> compid, Nullable<double> discount, Nullable<double> taxAmountShow, Nullable<double> caltotal, Nullable<double> totalcgst, Nullable<double> totalsgst, Nullable<double> totaligst, string e_Way_Bill)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var billingNameParameter = billingName != null ?
                new ObjectParameter("BillingName", billingName) :
                new ObjectParameter("BillingName", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var poNumberParameter = poNumber != null ?
                new ObjectParameter("PoNumber", poNumber) :
                new ObjectParameter("PoNumber", typeof(string));
    
            var poDateParameter = poDate.HasValue ?
                new ObjectParameter("PoDate", poDate) :
                new ObjectParameter("PoDate", typeof(System.DateTime));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var stateofSupplyParameter = stateofSupply != null ?
                new ObjectParameter("StateofSupply", stateofSupply) :
                new ObjectParameter("StateofSupply", typeof(string));
    
            var paymentTypeParameter = paymentType != null ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(string));
    
            var transportNameParameter = transportName != null ?
                new ObjectParameter("TransportName", transportName) :
                new ObjectParameter("TransportName", typeof(string));
    
            var deliveryLocationParameter = deliveryLocation != null ?
                new ObjectParameter("DeliveryLocation", deliveryLocation) :
                new ObjectParameter("DeliveryLocation", typeof(string));
    
            var vehicleNumberParameter = vehicleNumber != null ?
                new ObjectParameter("VehicleNumber", vehicleNumber) :
                new ObjectParameter("VehicleNumber", typeof(string));
    
            var deliverydateParameter = deliverydate.HasValue ?
                new ObjectParameter("Deliverydate", deliverydate) :
                new ObjectParameter("Deliverydate", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var transportChargesParameter = transportCharges.HasValue ?
                new ObjectParameter("TransportCharges", transportCharges) :
                new ObjectParameter("TransportCharges", typeof(double));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(byte[]));
    
            var tax1Parameter = tax1 != null ?
                new ObjectParameter("Tax1", tax1) :
                new ObjectParameter("Tax1", typeof(string));
    
            var cGSTParameter = cGST.HasValue ?
                new ObjectParameter("CGST", cGST) :
                new ObjectParameter("CGST", typeof(double));
    
            var sGSTParameter = sGST.HasValue ?
                new ObjectParameter("SGST", sGST) :
                new ObjectParameter("SGST", typeof(double));
    
            var taxAmount1Parameter = taxAmount1.HasValue ?
                new ObjectParameter("TaxAmount1", taxAmount1) :
                new ObjectParameter("TaxAmount1", typeof(double));
    
            var totalDiscountParameter = totalDiscount != null ?
                new ObjectParameter("TotalDiscount", totalDiscount) :
                new ObjectParameter("TotalDiscount", typeof(string));
    
            var discountAmount1Parameter = discountAmount1.HasValue ?
                new ObjectParameter("DiscountAmount1", discountAmount1) :
                new ObjectParameter("DiscountAmount1", typeof(double));
    
            var roundFigureParameter = roundFigure.HasValue ?
                new ObjectParameter("RoundFigure", roundFigure) :
                new ObjectParameter("RoundFigure", typeof(double));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(double));
    
            var receivedParameter = received.HasValue ?
                new ObjectParameter("Received", received) :
                new ObjectParameter("Received", typeof(double));
    
            var remainingBalParameter = remainingBal.HasValue ?
                new ObjectParameter("RemainingBal", remainingBal) :
                new ObjectParameter("RemainingBal", typeof(double));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var paymentTermsParameter = paymentTerms != null ?
                new ObjectParameter("PaymentTerms", paymentTerms) :
                new ObjectParameter("PaymentTerms", typeof(string));
    
            var feild1Parameter = feild1 != null ?
                new ObjectParameter("Feild1", feild1) :
                new ObjectParameter("Feild1", typeof(string));
    
            var feild2Parameter = feild2 != null ?
                new ObjectParameter("Feild2", feild2) :
                new ObjectParameter("Feild2", typeof(string));
    
            var feild3Parameter = feild3 != null ?
                new ObjectParameter("Feild3", feild3) :
                new ObjectParameter("Feild3", typeof(string));
    
            var feild4Parameter = feild4 != null ?
                new ObjectParameter("Feild4", feild4) :
                new ObjectParameter("Feild4", typeof(string));
    
            var feild5Parameter = feild5 != null ?
                new ObjectParameter("Feild5", feild5) :
                new ObjectParameter("Feild5", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var itemCategoryParameter = itemCategory != null ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var iGSTParameter = iGST.HasValue ?
                new ObjectParameter("IGST", iGST) :
                new ObjectParameter("IGST", typeof(double));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(double));
    
            var taxAmountShowParameter = taxAmountShow.HasValue ?
                new ObjectParameter("TaxAmountShow", taxAmountShow) :
                new ObjectParameter("TaxAmountShow", typeof(double));
    
            var caltotalParameter = caltotal.HasValue ?
                new ObjectParameter("Caltotal", caltotal) :
                new ObjectParameter("Caltotal", typeof(double));
    
            var totalcgstParameter = totalcgst.HasValue ?
                new ObjectParameter("totalcgst", totalcgst) :
                new ObjectParameter("totalcgst", typeof(double));
    
            var totalsgstParameter = totalsgst.HasValue ?
                new ObjectParameter("totalsgst", totalsgst) :
                new ObjectParameter("totalsgst", typeof(double));
    
            var totaligstParameter = totaligst.HasValue ?
                new ObjectParameter("totaligst", totaligst) :
                new ObjectParameter("totaligst", typeof(double));
    
            var e_Way_BillParameter = e_Way_Bill != null ?
                new ObjectParameter("E_Way_Bill", e_Way_Bill) :
                new ObjectParameter("E_Way_Bill", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tbl_SaleInvoiceSelect", actionParameter, invoiceIDParameter, partyNameParameter, billingNameParameter, contactNoParameter, poNumberParameter, poDateParameter, invoiceDateParameter, stateofSupplyParameter, paymentTypeParameter, transportNameParameter, deliveryLocationParameter, vehicleNumberParameter, deliverydateParameter, descriptionParameter, transportChargesParameter, imageParameter, tax1Parameter, cGSTParameter, sGSTParameter, taxAmount1Parameter, totalDiscountParameter, discountAmount1Parameter, roundFigureParameter, totalParameter, receivedParameter, remainingBalParameter, dueDateParameter, paymentTermsParameter, feild1Parameter, feild2Parameter, feild3Parameter, feild4Parameter, feild5Parameter, statusParameter, tableNameParameter, iDParameter, itemCategoryParameter, barcodeParameter, iGSTParameter, compidParameter, discountParameter, taxAmountShowParameter, caltotalParameter, totalcgstParameter, totalsgstParameter, totaligstParameter, e_Way_BillParameter);
        }
    
        public virtual ObjectResult<tbl_SaleOrderInnersp_Result> tbl_SaleOrderInnersp(string action, Nullable<int> iD, Nullable<int> itemID, string categoryType, string itemName, string basicUnit, string itemCode, Nullable<double> salePrice, string taxForSale, Nullable<double> saleTaxAmount, Nullable<int> qty, Nullable<int> freeQty, Nullable<double> itemAmount, string discount, Nullable<double> discountAmount, Nullable<int> compid, Nullable<int> orderNo, Nullable<double> cGST, Nullable<double> sGST, Nullable<double> iGST, Nullable<double> itemTotal)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var categoryTypeParameter = categoryType != null ?
                new ObjectParameter("CategoryType", categoryType) :
                new ObjectParameter("CategoryType", typeof(string));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var basicUnitParameter = basicUnit != null ?
                new ObjectParameter("BasicUnit", basicUnit) :
                new ObjectParameter("BasicUnit", typeof(string));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var salePriceParameter = salePrice.HasValue ?
                new ObjectParameter("SalePrice", salePrice) :
                new ObjectParameter("SalePrice", typeof(double));
    
            var taxForSaleParameter = taxForSale != null ?
                new ObjectParameter("TaxForSale", taxForSale) :
                new ObjectParameter("TaxForSale", typeof(string));
    
            var saleTaxAmountParameter = saleTaxAmount.HasValue ?
                new ObjectParameter("SaleTaxAmount", saleTaxAmount) :
                new ObjectParameter("SaleTaxAmount", typeof(double));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var freeQtyParameter = freeQty.HasValue ?
                new ObjectParameter("freeQty", freeQty) :
                new ObjectParameter("freeQty", typeof(int));
    
            var itemAmountParameter = itemAmount.HasValue ?
                new ObjectParameter("ItemAmount", itemAmount) :
                new ObjectParameter("ItemAmount", typeof(double));
    
            var discountParameter = discount != null ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(string));
    
            var discountAmountParameter = discountAmount.HasValue ?
                new ObjectParameter("DiscountAmount", discountAmount) :
                new ObjectParameter("DiscountAmount", typeof(double));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            var cGSTParameter = cGST.HasValue ?
                new ObjectParameter("CGST", cGST) :
                new ObjectParameter("CGST", typeof(double));
    
            var sGSTParameter = sGST.HasValue ?
                new ObjectParameter("SGST", sGST) :
                new ObjectParameter("SGST", typeof(double));
    
            var iGSTParameter = iGST.HasValue ?
                new ObjectParameter("IGST", iGST) :
                new ObjectParameter("IGST", typeof(double));
    
            var itemTotalParameter = itemTotal.HasValue ?
                new ObjectParameter("ItemTotal", itemTotal) :
                new ObjectParameter("ItemTotal", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_SaleOrderInnersp_Result>("tbl_SaleOrderInnersp", actionParameter, iDParameter, itemIDParameter, categoryTypeParameter, itemNameParameter, basicUnitParameter, itemCodeParameter, salePriceParameter, taxForSaleParameter, saleTaxAmountParameter, qtyParameter, freeQtyParameter, itemAmountParameter, discountParameter, discountAmountParameter, compidParameter, orderNoParameter, cGSTParameter, sGSTParameter, iGSTParameter, itemTotalParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> tbl_SaleOrderSelect(string action, Nullable<int> orderNo, string partyName, string billingName, string contactNo, Nullable<System.DateTime> orderDate, Nullable<System.DateTime> dueDate, string stateofSupply, string paymentType, string transportName, string deliveryLocation, string vehicleNumber, Nullable<System.DateTime> deliverydate, string description, Nullable<double> transportCharges, byte[] image, string tax1, Nullable<double> cGST, Nullable<double> sGST, Nullable<double> taxAmount1, string totalDiscount, Nullable<double> discountAmount1, Nullable<double> roundFigure, Nullable<double> total, Nullable<double> received, Nullable<double> remainingBal, string paymentTerms, string feild1, string feild2, string feild3, string feild4, string feild5, string status, string tableName, Nullable<int> iD, string itemCategory, string barcode, Nullable<double> iGST, Nullable<int> compid, Nullable<double> taxShow, Nullable<double> discount, Nullable<double> calTotal)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var orderNoParameter = orderNo.HasValue ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(int));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var billingNameParameter = billingName != null ?
                new ObjectParameter("BillingName", billingName) :
                new ObjectParameter("BillingName", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var stateofSupplyParameter = stateofSupply != null ?
                new ObjectParameter("StateofSupply", stateofSupply) :
                new ObjectParameter("StateofSupply", typeof(string));
    
            var paymentTypeParameter = paymentType != null ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(string));
    
            var transportNameParameter = transportName != null ?
                new ObjectParameter("TransportName", transportName) :
                new ObjectParameter("TransportName", typeof(string));
    
            var deliveryLocationParameter = deliveryLocation != null ?
                new ObjectParameter("DeliveryLocation", deliveryLocation) :
                new ObjectParameter("DeliveryLocation", typeof(string));
    
            var vehicleNumberParameter = vehicleNumber != null ?
                new ObjectParameter("VehicleNumber", vehicleNumber) :
                new ObjectParameter("VehicleNumber", typeof(string));
    
            var deliverydateParameter = deliverydate.HasValue ?
                new ObjectParameter("Deliverydate", deliverydate) :
                new ObjectParameter("Deliverydate", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var transportChargesParameter = transportCharges.HasValue ?
                new ObjectParameter("TransportCharges", transportCharges) :
                new ObjectParameter("TransportCharges", typeof(double));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(byte[]));
    
            var tax1Parameter = tax1 != null ?
                new ObjectParameter("Tax1", tax1) :
                new ObjectParameter("Tax1", typeof(string));
    
            var cGSTParameter = cGST.HasValue ?
                new ObjectParameter("CGST", cGST) :
                new ObjectParameter("CGST", typeof(double));
    
            var sGSTParameter = sGST.HasValue ?
                new ObjectParameter("SGST", sGST) :
                new ObjectParameter("SGST", typeof(double));
    
            var taxAmount1Parameter = taxAmount1.HasValue ?
                new ObjectParameter("TaxAmount1", taxAmount1) :
                new ObjectParameter("TaxAmount1", typeof(double));
    
            var totalDiscountParameter = totalDiscount != null ?
                new ObjectParameter("TotalDiscount", totalDiscount) :
                new ObjectParameter("TotalDiscount", typeof(string));
    
            var discountAmount1Parameter = discountAmount1.HasValue ?
                new ObjectParameter("DiscountAmount1", discountAmount1) :
                new ObjectParameter("DiscountAmount1", typeof(double));
    
            var roundFigureParameter = roundFigure.HasValue ?
                new ObjectParameter("RoundFigure", roundFigure) :
                new ObjectParameter("RoundFigure", typeof(double));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(double));
    
            var receivedParameter = received.HasValue ?
                new ObjectParameter("Received", received) :
                new ObjectParameter("Received", typeof(double));
    
            var remainingBalParameter = remainingBal.HasValue ?
                new ObjectParameter("RemainingBal", remainingBal) :
                new ObjectParameter("RemainingBal", typeof(double));
    
            var paymentTermsParameter = paymentTerms != null ?
                new ObjectParameter("PaymentTerms", paymentTerms) :
                new ObjectParameter("PaymentTerms", typeof(string));
    
            var feild1Parameter = feild1 != null ?
                new ObjectParameter("Feild1", feild1) :
                new ObjectParameter("Feild1", typeof(string));
    
            var feild2Parameter = feild2 != null ?
                new ObjectParameter("Feild2", feild2) :
                new ObjectParameter("Feild2", typeof(string));
    
            var feild3Parameter = feild3 != null ?
                new ObjectParameter("Feild3", feild3) :
                new ObjectParameter("Feild3", typeof(string));
    
            var feild4Parameter = feild4 != null ?
                new ObjectParameter("Feild4", feild4) :
                new ObjectParameter("Feild4", typeof(string));
    
            var feild5Parameter = feild5 != null ?
                new ObjectParameter("Feild5", feild5) :
                new ObjectParameter("Feild5", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var itemCategoryParameter = itemCategory != null ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var iGSTParameter = iGST.HasValue ?
                new ObjectParameter("IGST", iGST) :
                new ObjectParameter("IGST", typeof(double));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var taxShowParameter = taxShow.HasValue ?
                new ObjectParameter("TaxShow", taxShow) :
                new ObjectParameter("TaxShow", typeof(double));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(double));
    
            var calTotalParameter = calTotal.HasValue ?
                new ObjectParameter("CalTotal", calTotal) :
                new ObjectParameter("CalTotal", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("tbl_SaleOrderSelect", actionParameter, orderNoParameter, partyNameParameter, billingNameParameter, contactNoParameter, orderDateParameter, dueDateParameter, stateofSupplyParameter, paymentTypeParameter, transportNameParameter, deliveryLocationParameter, vehicleNumberParameter, deliverydateParameter, descriptionParameter, transportChargesParameter, imageParameter, tax1Parameter, cGSTParameter, sGSTParameter, taxAmount1Parameter, totalDiscountParameter, discountAmount1Parameter, roundFigureParameter, totalParameter, receivedParameter, remainingBalParameter, paymentTermsParameter, feild1Parameter, feild2Parameter, feild3Parameter, feild4Parameter, feild5Parameter, statusParameter, tableNameParameter, iDParameter, itemCategoryParameter, barcodeParameter, iGSTParameter, compidParameter, taxShowParameter, discountParameter, calTotalParameter);
        }
    
        public virtual ObjectResult<tbl_TransactionPassswordSelect_Result> tbl_TransactionPassswordSelect(string action, Nullable<int> iD, string newPassword, string confirmPassword)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            var confirmPasswordParameter = confirmPassword != null ?
                new ObjectParameter("ConfirmPassword", confirmPassword) :
                new ObjectParameter("ConfirmPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_TransactionPassswordSelect_Result>("tbl_TransactionPassswordSelect", actionParameter, iDParameter, newPasswordParameter, confirmPasswordParameter);
        }
    
        public virtual ObjectResult<tbl_TransactionPrefixSelect_Result> tbl_TransactionPrefixSelect(string action, Nullable<int> iD, string frim, Nullable<double> sale, Nullable<double> creditNote, Nullable<double> purchaseOrder, Nullable<double> saleOrder, Nullable<double> estimate, Nullable<double> deliveryChallan, Nullable<double> paymentIn)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var frimParameter = frim != null ?
                new ObjectParameter("Frim", frim) :
                new ObjectParameter("Frim", typeof(string));
    
            var saleParameter = sale.HasValue ?
                new ObjectParameter("sale", sale) :
                new ObjectParameter("sale", typeof(double));
    
            var creditNoteParameter = creditNote.HasValue ?
                new ObjectParameter("creditNote", creditNote) :
                new ObjectParameter("creditNote", typeof(double));
    
            var purchaseOrderParameter = purchaseOrder.HasValue ?
                new ObjectParameter("PurchaseOrder", purchaseOrder) :
                new ObjectParameter("PurchaseOrder", typeof(double));
    
            var saleOrderParameter = saleOrder.HasValue ?
                new ObjectParameter("SaleOrder", saleOrder) :
                new ObjectParameter("SaleOrder", typeof(double));
    
            var estimateParameter = estimate.HasValue ?
                new ObjectParameter("Estimate", estimate) :
                new ObjectParameter("Estimate", typeof(double));
    
            var deliveryChallanParameter = deliveryChallan.HasValue ?
                new ObjectParameter("DeliveryChallan", deliveryChallan) :
                new ObjectParameter("DeliveryChallan", typeof(double));
    
            var paymentInParameter = paymentIn.HasValue ?
                new ObjectParameter("PaymentIn", paymentIn) :
                new ObjectParameter("PaymentIn", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_TransactionPrefixSelect_Result>("tbl_TransactionPrefixSelect", actionParameter, iDParameter, frimParameter, saleParameter, creditNoteParameter, purchaseOrderParameter, saleOrderParameter, estimateParameter, deliveryChallanParameter, paymentInParameter);
        }
    
        public virtual ObjectResult<tbl_UnitConversionSelect_Result> tbl_UnitConversionSelect(string action, Nullable<int> unitConversionID, string basicUnit, string secondaryUnit, Nullable<double> rate, Nullable<int> compid)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var unitConversionIDParameter = unitConversionID.HasValue ?
                new ObjectParameter("UnitConversionID", unitConversionID) :
                new ObjectParameter("UnitConversionID", typeof(int));
    
            var basicUnitParameter = basicUnit != null ?
                new ObjectParameter("BasicUnit", basicUnit) :
                new ObjectParameter("BasicUnit", typeof(string));
    
            var secondaryUnitParameter = secondaryUnit != null ?
                new ObjectParameter("SecondaryUnit", secondaryUnit) :
                new ObjectParameter("SecondaryUnit", typeof(string));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(double));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_UnitConversionSelect_Result>("tbl_UnitConversionSelect", actionParameter, unitConversionIDParameter, basicUnitParameter, secondaryUnitParameter, rateParameter, compidParameter);
        }
    
        public virtual ObjectResult<tbl_UnitMasterUnit_Result> tbl_UnitMasterUnit(string action, Nullable<int> unitID, string unitName, string subUnitName, string additionalFeild1, string additionalFeild2, Nullable<int> compid)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var unitNameParameter = unitName != null ?
                new ObjectParameter("UnitName", unitName) :
                new ObjectParameter("UnitName", typeof(string));
    
            var subUnitNameParameter = subUnitName != null ?
                new ObjectParameter("SubUnitName", subUnitName) :
                new ObjectParameter("SubUnitName", typeof(string));
    
            var additionalFeild1Parameter = additionalFeild1 != null ?
                new ObjectParameter("AdditionalFeild1", additionalFeild1) :
                new ObjectParameter("AdditionalFeild1", typeof(string));
    
            var additionalFeild2Parameter = additionalFeild2 != null ?
                new ObjectParameter("AdditionalFeild2", additionalFeild2) :
                new ObjectParameter("AdditionalFeild2", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_UnitMasterUnit_Result>("tbl_UnitMasterUnit", actionParameter, unitIDParameter, unitNameParameter, subUnitNameParameter, additionalFeild1Parameter, additionalFeild2Parameter, compidParameter);
        }
    
        public virtual ObjectResult<tbl_PartyMaster> PartyMasterCrud(string action, Nullable<int> partiesID, string partyName, string contactNo, string billingAddress, string emailID, string gSTType, string state, Nullable<double> openingBal, Nullable<System.DateTime> asOfDate, string addRemainder, string partyType, string shippingAddress, string partyGroup, Nullable<int> compid, string paidstatus, string type)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var partiesIDParameter = partiesID.HasValue ?
                new ObjectParameter("PartiesID", partiesID) :
                new ObjectParameter("PartiesID", typeof(int));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var billingAddressParameter = billingAddress != null ?
                new ObjectParameter("BillingAddress", billingAddress) :
                new ObjectParameter("BillingAddress", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var gSTTypeParameter = gSTType != null ?
                new ObjectParameter("GSTType", gSTType) :
                new ObjectParameter("GSTType", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var openingBalParameter = openingBal.HasValue ?
                new ObjectParameter("OpeningBal", openingBal) :
                new ObjectParameter("OpeningBal", typeof(double));
    
            var asOfDateParameter = asOfDate.HasValue ?
                new ObjectParameter("AsOfDate", asOfDate) :
                new ObjectParameter("AsOfDate", typeof(System.DateTime));
    
            var addRemainderParameter = addRemainder != null ?
                new ObjectParameter("AddRemainder", addRemainder) :
                new ObjectParameter("AddRemainder", typeof(string));
    
            var partyTypeParameter = partyType != null ?
                new ObjectParameter("PartyType", partyType) :
                new ObjectParameter("PartyType", typeof(string));
    
            var shippingAddressParameter = shippingAddress != null ?
                new ObjectParameter("ShippingAddress", shippingAddress) :
                new ObjectParameter("ShippingAddress", typeof(string));
    
            var partyGroupParameter = partyGroup != null ?
                new ObjectParameter("PartyGroup", partyGroup) :
                new ObjectParameter("PartyGroup", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var paidstatusParameter = paidstatus != null ?
                new ObjectParameter("paidstatus", paidstatus) :
                new ObjectParameter("paidstatus", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_PartyMaster>("PartyMasterCrud", actionParameter, partiesIDParameter, partyNameParameter, contactNoParameter, billingAddressParameter, emailIDParameter, gSTTypeParameter, stateParameter, openingBalParameter, asOfDateParameter, addRemainderParameter, partyTypeParameter, shippingAddressParameter, partyGroupParameter, compidParameter, paidstatusParameter, typeParameter);
        }
    
        public virtual ObjectResult<tbl_PartyMaster> PartyMasterCrud(string action, Nullable<int> partiesID, string partyName, string contactNo, string billingAddress, string emailID, string gSTType, string state, Nullable<double> openingBal, Nullable<System.DateTime> asOfDate, string addRemainder, string partyType, string shippingAddress, string partyGroup, Nullable<int> compid, string paidstatus, string type, MergeOption mergeOption)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var partiesIDParameter = partiesID.HasValue ?
                new ObjectParameter("PartiesID", partiesID) :
                new ObjectParameter("PartiesID", typeof(int));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var billingAddressParameter = billingAddress != null ?
                new ObjectParameter("BillingAddress", billingAddress) :
                new ObjectParameter("BillingAddress", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var gSTTypeParameter = gSTType != null ?
                new ObjectParameter("GSTType", gSTType) :
                new ObjectParameter("GSTType", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var openingBalParameter = openingBal.HasValue ?
                new ObjectParameter("OpeningBal", openingBal) :
                new ObjectParameter("OpeningBal", typeof(double));
    
            var asOfDateParameter = asOfDate.HasValue ?
                new ObjectParameter("AsOfDate", asOfDate) :
                new ObjectParameter("AsOfDate", typeof(System.DateTime));
    
            var addRemainderParameter = addRemainder != null ?
                new ObjectParameter("AddRemainder", addRemainder) :
                new ObjectParameter("AddRemainder", typeof(string));
    
            var partyTypeParameter = partyType != null ?
                new ObjectParameter("PartyType", partyType) :
                new ObjectParameter("PartyType", typeof(string));
    
            var shippingAddressParameter = shippingAddress != null ?
                new ObjectParameter("ShippingAddress", shippingAddress) :
                new ObjectParameter("ShippingAddress", typeof(string));
    
            var partyGroupParameter = partyGroup != null ?
                new ObjectParameter("PartyGroup", partyGroup) :
                new ObjectParameter("PartyGroup", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            var paidstatusParameter = paidstatus != null ?
                new ObjectParameter("paidstatus", paidstatus) :
                new ObjectParameter("paidstatus", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_PartyMaster>("PartyMasterCrud", mergeOption, actionParameter, partiesIDParameter, partyNameParameter, contactNoParameter, billingAddressParameter, emailIDParameter, gSTTypeParameter, stateParameter, openingBalParameter, asOfDateParameter, addRemainderParameter, partyTypeParameter, shippingAddressParameter, partyGroupParameter, compidParameter, paidstatusParameter, typeParameter);
        }
    
        public virtual ObjectResult<tbl_CompanyMaster> PerformCRUD_Comp(string action, Nullable<int> companyID, string companyName, string phoneNo, string emailID, string referaleCode, string businessType, string address, string city, string state, string gSTNumber, string ownerName, byte[] signature, byte[] addLogo, string additinalFeild1, string additinalFeild2, string additinalFeild3, Nullable<int> def)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var referaleCodeParameter = referaleCode != null ?
                new ObjectParameter("ReferaleCode", referaleCode) :
                new ObjectParameter("ReferaleCode", typeof(string));
    
            var businessTypeParameter = businessType != null ?
                new ObjectParameter("BusinessType", businessType) :
                new ObjectParameter("BusinessType", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var gSTNumberParameter = gSTNumber != null ?
                new ObjectParameter("GSTNumber", gSTNumber) :
                new ObjectParameter("GSTNumber", typeof(string));
    
            var ownerNameParameter = ownerName != null ?
                new ObjectParameter("OwnerName", ownerName) :
                new ObjectParameter("OwnerName", typeof(string));
    
            var signatureParameter = signature != null ?
                new ObjectParameter("Signature", signature) :
                new ObjectParameter("Signature", typeof(byte[]));
    
            var addLogoParameter = addLogo != null ?
                new ObjectParameter("AddLogo", addLogo) :
                new ObjectParameter("AddLogo", typeof(byte[]));
    
            var additinalFeild1Parameter = additinalFeild1 != null ?
                new ObjectParameter("AdditinalFeild1", additinalFeild1) :
                new ObjectParameter("AdditinalFeild1", typeof(string));
    
            var additinalFeild2Parameter = additinalFeild2 != null ?
                new ObjectParameter("AdditinalFeild2", additinalFeild2) :
                new ObjectParameter("AdditinalFeild2", typeof(string));
    
            var additinalFeild3Parameter = additinalFeild3 != null ?
                new ObjectParameter("AdditinalFeild3", additinalFeild3) :
                new ObjectParameter("AdditinalFeild3", typeof(string));
    
            var defParameter = def.HasValue ?
                new ObjectParameter("def", def) :
                new ObjectParameter("def", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_CompanyMaster>("PerformCRUD_Comp", actionParameter, companyIDParameter, companyNameParameter, phoneNoParameter, emailIDParameter, referaleCodeParameter, businessTypeParameter, addressParameter, cityParameter, stateParameter, gSTNumberParameter, ownerNameParameter, signatureParameter, addLogoParameter, additinalFeild1Parameter, additinalFeild2Parameter, additinalFeild3Parameter, defParameter);
        }
    
        public virtual ObjectResult<tbl_CompanyMaster> PerformCRUD_Comp(string action, Nullable<int> companyID, string companyName, string phoneNo, string emailID, string referaleCode, string businessType, string address, string city, string state, string gSTNumber, string ownerName, byte[] signature, byte[] addLogo, string additinalFeild1, string additinalFeild2, string additinalFeild3, Nullable<int> def, MergeOption mergeOption)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var referaleCodeParameter = referaleCode != null ?
                new ObjectParameter("ReferaleCode", referaleCode) :
                new ObjectParameter("ReferaleCode", typeof(string));
    
            var businessTypeParameter = businessType != null ?
                new ObjectParameter("BusinessType", businessType) :
                new ObjectParameter("BusinessType", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var gSTNumberParameter = gSTNumber != null ?
                new ObjectParameter("GSTNumber", gSTNumber) :
                new ObjectParameter("GSTNumber", typeof(string));
    
            var ownerNameParameter = ownerName != null ?
                new ObjectParameter("OwnerName", ownerName) :
                new ObjectParameter("OwnerName", typeof(string));
    
            var signatureParameter = signature != null ?
                new ObjectParameter("Signature", signature) :
                new ObjectParameter("Signature", typeof(byte[]));
    
            var addLogoParameter = addLogo != null ?
                new ObjectParameter("AddLogo", addLogo) :
                new ObjectParameter("AddLogo", typeof(byte[]));
    
            var additinalFeild1Parameter = additinalFeild1 != null ?
                new ObjectParameter("AdditinalFeild1", additinalFeild1) :
                new ObjectParameter("AdditinalFeild1", typeof(string));
    
            var additinalFeild2Parameter = additinalFeild2 != null ?
                new ObjectParameter("AdditinalFeild2", additinalFeild2) :
                new ObjectParameter("AdditinalFeild2", typeof(string));
    
            var additinalFeild3Parameter = additinalFeild3 != null ?
                new ObjectParameter("AdditinalFeild3", additinalFeild3) :
                new ObjectParameter("AdditinalFeild3", typeof(string));
    
            var defParameter = def.HasValue ?
                new ObjectParameter("def", def) :
                new ObjectParameter("def", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_CompanyMaster>("PerformCRUD_Comp", mergeOption, actionParameter, companyIDParameter, companyNameParameter, phoneNoParameter, emailIDParameter, referaleCodeParameter, businessTypeParameter, addressParameter, cityParameter, stateParameter, gSTNumberParameter, ownerNameParameter, signatureParameter, addLogoParameter, additinalFeild1Parameter, additinalFeild2Parameter, additinalFeild3Parameter, defParameter);
        }
    }
}
