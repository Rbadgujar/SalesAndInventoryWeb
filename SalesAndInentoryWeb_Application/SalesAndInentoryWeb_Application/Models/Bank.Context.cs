//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SalesAndInentoryWeb_Application.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class idealtec_inventoryEntities6 : DbContext
    {
        public idealtec_inventoryEntities6()
            : base("name=idealtec_inventoryEntities6")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tbl_BankAccount> tbl_BankAccount { get; set; }
        public virtual DbSet<tbl_BankAdjustment> tbl_BankAdjustment { get; set; }
        public virtual DbSet<tbl_BanktoBankTransfer> tbl_BanktoBankTransfer { get; set; }
    
        public virtual ObjectResult<BankAccountSelect_Result> BankAccountSelect(string action, Nullable<int> iD, string accountName, string bankName, string accountNo, Nullable<double> openingBal, Nullable<System.DateTime> date, Nullable<int> compid)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            var openingBalParameter = openingBal.HasValue ?
                new ObjectParameter("OpeningBal", openingBal) :
                new ObjectParameter("OpeningBal", typeof(double));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BankAccountSelect_Result>("BankAccountSelect", actionParameter, iDParameter, accountNameParameter, bankNameParameter, accountNoParameter, openingBalParameter, dateParameter, compidParameter);
        }
    
        public virtual ObjectResult<Banktobank_Result> Banktobank(string action, Nullable<int> iD, string fromBank, string toBank, Nullable<double> amount, Nullable<System.DateTime> date, string descripition, Nullable<int> compid)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var fromBankParameter = fromBank != null ?
                new ObjectParameter("FromBank", fromBank) :
                new ObjectParameter("FromBank", typeof(string));
    
            var toBankParameter = toBank != null ?
                new ObjectParameter("ToBank", toBank) :
                new ObjectParameter("ToBank", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var descripitionParameter = descripition != null ?
                new ObjectParameter("Descripition", descripition) :
                new ObjectParameter("Descripition", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Banktobank_Result>("Banktobank", actionParameter, iDParameter, fromBankParameter, toBankParameter, amountParameter, dateParameter, descripitionParameter, compidParameter);
        }
    
        public virtual ObjectResult<tbl_BankAdjustmentselect_Result> tbl_BankAdjustmentselect(string action, Nullable<int> iD, string bankAccount, string entryType, Nullable<double> amount, Nullable<System.DateTime> date, string description, Nullable<int> compid)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var bankAccountParameter = bankAccount != null ?
                new ObjectParameter("BankAccount", bankAccount) :
                new ObjectParameter("BankAccount", typeof(string));
    
            var entryTypeParameter = entryType != null ?
                new ObjectParameter("EntryType", entryType) :
                new ObjectParameter("EntryType", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var compidParameter = compid.HasValue ?
                new ObjectParameter("compid", compid) :
                new ObjectParameter("compid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbl_BankAdjustmentselect_Result>("tbl_BankAdjustmentselect", actionParameter, iDParameter, bankAccountParameter, entryTypeParameter, amountParameter, dateParameter, descriptionParameter, compidParameter);
        }
    }
}
